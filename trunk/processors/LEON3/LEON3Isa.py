# -*- coding: iso-8859-1 -*-
####################################################################################
#         ___        ___           ___           ___
#        /  /\      /  /\         /  /\         /  /\
#       /  /:/     /  /::\       /  /::\       /  /::\
#      /  /:/     /  /:/\:\     /  /:/\:\     /  /:/\:\
#     /  /:/     /  /:/~/:/    /  /:/~/::\   /  /:/~/:/
#    /  /::\    /__/:/ /:/___ /__/:/ /:/\:\ /__/:/ /:/
#   /__/:/\:\   \  \:\/:::::/ \  \:\/:/__\/ \  \:\/:/
#   \__\/  \:\   \  \::/~~~~   \  \::/       \  \::/
#        \  \:\   \  \:\        \  \:\        \  \:\
#         \  \ \   \  \:\        \  \:\        \  \:\
#          \__\/    \__\/         \__\/         \__\/
#
#   This file is part of TRAP.
#
#   TRAP is free software; you can redistribute it and/or modify
#   it under the terms of the GNU Lesser General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU Lesser General Public License for more details.
#
#   You should have received a copy of the GNU Lesser General Public License
#   along with this TRAP; if not, write to the
#   Free Software Foundation, Inc.,
#   51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA.
#   or see <http://www.gnu.org/licenses/>.
#
#   (c) Luca Fossati, fossati@elet.polimi.it
#
####################################################################################



# Lets first of all import the necessary files for the
# creation of the processor
import trap
import cxx_writer
from LEON3Coding import *
from LEON3Methods import *

# ISA declaration: it is the container for all the single instructions
isa = trap.ISA()

# Now I add to the ISA all the helper methods and operations which will be
# called from the instructions
isa.addMethod(IncrementRegWindow_method)
isa.addMethod(DecrementRegWindow_method)
isa.addMethod(SignExtend_method)

#-------------------------------------------------------------------------------------
# Let's now procede to set the behavior of the instructions
#-------------------------------------------------------------------------------------
#
# Note the special operations:
#
# -- annull(): transforms the current instruction in a NOP; if we are
# in the middle of the execution of some code, it also terminates the
# execution of that part of code (it is like an exception)
# -- flush(): flushes the pipeline stages preceding the one in which
# the flush method has been called
# -- stall(n): stalls the current stage and the preceding ones for n clock
# cycles. If we issue this operation in the middle of the execution of an
# instruction, anyway the execution of that code finished before the stall
# operation has any effect; if that code contains another call to stall(m),
# the pipeline stages are stalled for a total of n+m
# -- THROW_EXCEPTION: a macro for throwing C++ exceptions
#

#____________________________________________________________________________________________________
#----------------------------------------------------------------------------------------------------
# Now using all the defined operations, instruction codings, etc
# I can actually declare the processor instructions
#----------------------------------------------------------------------------------------------------
#____________________________________________________________________________________________________

# Load Integer Instruction Family
ldsb_imm_Instr = trap.Instruction('LDSB_imm', True, frequency = 5)
ldsb_imm_Instr.setMachineCode(mem_format2, {'op3': [0, 0, 1, 0, 0, 1]}, 'TODO')
ldsb_imm_Instr.setVarField('rd', ('REGS', 0), 'out')
ldsb_imm_Instr.setCode(opCode, 'execute')
ldsb_imm_Instr.addTest({}, {}, {})
isa.addInstruction(ldsb_imm_Instr)
ldsb_reg_Instr = trap.Instruction('LDSB_reg', True, frequency = 5)
ldsb_reg_Instr.setMachineCode(mem_format1, {'op3': [0, 0, 1, 0, 0, 1]}, 'TODO')
ldsb_reg_Instr.setVarField('rd', ('REGS', 0), 'out')
ldsb_reg_Instr.setCode(opCode, 'execute')
ldsb_reg_Instr.addTest({}, {}, {})
isa.addInstruction(ldsb_reg_Instr)
ldsh_imm_Instr = trap.Instruction('LDSH_imm', True, frequency = 5)
ldsh_imm_Instr.setMachineCode(mem_format2, {'op3': [0, 0, 1, 0, 1, 0]}, 'TODO')
ldsh_imm_Instr.setVarField('rd', ('REGS', 0), 'out')
ldsh_imm_Instr.setCode(opCode, 'execute')
ldsh_imm_Instr.addTest({}, {}, {})
isa.addInstruction(ldsh_imm_Instr)
ldsh_reg_Instr = trap.Instruction('LDSH_reg', True, frequency = 5)
ldsh_reg_Instr.setMachineCode(mem_format1, {'op3': [0, 0, 1, 0, 1, 0]}, 'TODO')
ldsh_reg_Instr.setVarField('rd', ('REGS', 0), 'out')
ldsh_reg_Instr.setCode(opCode, 'execute')
ldsh_reg_Instr.addTest({}, {}, {})
isa.addInstruction(ldsh_reg_Instr)
ldub_imm_Instr = trap.Instruction('LDUB_imm', True, frequency = 5)
ldub_imm_Instr.setMachineCode(mem_format2, {'op3': [0, 0, 0, 0, 0, 1]}, 'TODO')
ldub_imm_Instr.setVarField('rd', ('REGS', 0), 'out')
ldub_imm_Instr.setCode(opCode, 'execute')
ldub_imm_Instr.addTest({}, {}, {})
isa.addInstruction(ldub_imm_Instr)
ldub_reg_Instr = trap.Instruction('LDUB_reg', True, frequency = 5)
ldub_reg_Instr.setMachineCode(mem_format1, {'op3': [0, 0, 0, 0, 0, 1]}, 'TODO')
ldub_reg_Instr.setVarField('rd', ('REGS', 0), 'out')
ldub_reg_Instr.setCode(opCode, 'execute')
ldub_reg_Instr.addTest({}, {}, {})
isa.addInstruction(ldub_reg_Instr)
lduh_imm_Instr = trap.Instruction('LDUH_imm', True, frequency = 5)
lduh_imm_Instr.setMachineCode(mem_format2, {'op3': [0, 0, 0, 0, 1, 0]}, 'TODO')
lduh_imm_Instr.setVarField('rd', ('REGS', 0), 'out')
lduh_imm_Instr.setCode(opCode, 'execute')
lduh_imm_Instr.addTest({}, {}, {})
isa.addInstruction(lduh_imm_Instr)
lduh_reg_Instr = trap.Instruction('LDUH_reg', True, frequency = 5)
lduh_reg_Instr.setMachineCode(mem_format1, {'op3': [0, 0, 0, 0, 1, 0]}, 'TODO')
lduh_reg_Instr.setVarField('rd', ('REGS', 0), 'out')
lduh_reg_Instr.setCode(opCode, 'execute')
lduh_reg_Instr.addTest({}, {}, {})
isa.addInstruction(lduh_reg_Instr)
ld_imm_Instr = trap.Instruction('LD_imm', True, frequency = 5)
ld_imm_Instr.setMachineCode(mem_format2, {'op3': [0, 0, 0, 0, 0, 0]}, 'TODO')
ld_imm_Instr.setVarField('rd', ('REGS', 0), 'out')
ld_imm_Instr.setCode(opCode, 'execute')
ld_imm_Instr.addTest({}, {}, {})
isa.addInstruction(ld_imm_Instr)
ld_reg_Instr = trap.Instruction('LD_reg', True, frequency = 5)
ld_reg_Instr.setMachineCode(mem_format1, {'op3': [0, 0, 0, 0, 0, 0]}, 'TODO')
ld_reg_Instr.setVarField('rd', ('REGS', 0), 'out')
ld_reg_Instr.setCode(opCode, 'execute')
ld_reg_Instr.addTest({}, {}, {})
isa.addInstruction(ld_reg_Instr)
ldd_imm_Instr = trap.Instruction('LDD_imm', True, frequency = 5)
ldd_imm_Instr.setMachineCode(mem_format2, {'op3': [0, 0, 0, 0, 1, 1]}, 'TODO')
ldd_imm_Instr.setVarField('rd', ('REGS', 0), 'out')
ldd_imm_Instr.setCode(opCode, 'execute')
ldd_imm_Instr.addTest({}, {}, {})
isa.addInstruction(ldd_imm_Instr)
ldd_reg_Instr = trap.Instruction('LDD_reg', True, frequency = 5)
ldd_reg_Instr.setMachineCode(mem_format1, {'op3': [0, 0, 0, 0, 1, 1]}, 'TODO')
ldd_reg_Instr.setVarField('rd', ('REGS', 0), 'out')
ldd_reg_Instr.setCode(opCode, 'execute')
ldd_reg_Instr.addTest({}, {}, {})
isa.addInstruction(ldd_reg_Instr)
ldsba_imm_Instr = trap.Instruction('LDSBA_imm', True, frequency = 5)
ldsba_imm_Instr.setMachineCode(mem_format2, {'op3': [0, 1, 1, 0, 0, 1]}, 'TODO')
ldsba_imm_Instr.setVarField('rd', ('REGS', 0), 'out')
ldsba_imm_Instr.setCode(opCode, 'execute')
ldsba_imm_Instr.addTest({}, {}, {})
isa.addInstruction(ldsba_imm_Instr)
ldsba_reg_Instr = trap.Instruction('LDSBA_reg', True, frequency = 5)
ldsba_reg_Instr.setMachineCode(mem_format1, {'op3': [0, 1, 1, 0, 0, 1]}, 'TODO')
ldsba_reg_Instr.setVarField('rd', ('REGS', 0), 'out')
ldsba_reg_Instr.setCode(opCode, 'execute')
ldsba_reg_Instr.addTest({}, {}, {})
isa.addInstruction(ldsba_reg_Instr)
ldsha_imm_Instr = trap.Instruction('LDSHA_imm', True, frequency = 5)
ldsha_imm_Instr.setMachineCode(mem_format2, {'op3': [0, 1, 1, 0, 1, 0]}, 'TODO')
ldsha_imm_Instr.setVarField('rd', ('REGS', 0), 'out')
ldsha_imm_Instr.setCode(opCode, 'execute')
ldsha_imm_Instr.addTest({}, {}, {})
isa.addInstruction(ldsha_imm_Instr)
ldsha_reg_Instr = trap.Instruction('LDSHA_reg', True, frequency = 5)
ldsha_reg_Instr.setMachineCode(mem_format1, {'op3': [0, 1, 1, 0, 1, 0]}, 'TODO')
ldsha_reg_Instr.setVarField('rd', ('REGS', 0), 'out')
ldsha_reg_Instr.setCode(opCode, 'execute')
ldsha_reg_Instr.addTest({}, {}, {})
isa.addInstruction(ldsha_reg_Instr)
lduba_imm_Instr = trap.Instruction('LDUBA_imm', True, frequency = 5)
lduba_imm_Instr.setMachineCode(mem_format2, {'op3': [0, 1, 0, 0, 0, 1]}, 'TODO')
lduba_imm_Instr.setVarField('rd', ('REGS', 0), 'out')
lduba_imm_Instr.setCode(opCode, 'execute')
lduba_imm_Instr.addTest({}, {}, {})
isa.addInstruction(lduba_imm_Instr)
lduba_reg_Instr = trap.Instruction('LDUBA_reg', True, frequency = 5)
lduba_reg_Instr.setMachineCode(mem_format1, {'op3': [0, 1, 0, 0, 0, 1]}, 'TODO')
lduba_reg_Instr.setVarField('rd', ('REGS', 0), 'out')
lduba_reg_Instr.setCode(opCode, 'execute')
lduba_reg_Instr.addTest({}, {}, {})
isa.addInstruction(lduba_reg_Instr)
lduha_imm_Instr = trap.Instruction('LDUHA_imm', True, frequency = 5)
lduha_imm_Instr.setMachineCode(mem_format2, {'op3': [0, 1, 0, 0, 1, 0]}, 'TODO')
lduha_imm_Instr.setVarField('rd', ('REGS', 0), 'out')
lduha_imm_Instr.setCode(opCode, 'execute')
lduha_imm_Instr.addTest({}, {}, {})
isa.addInstruction(lduha_imm_Instr)
lduha_reg_Instr = trap.Instruction('LDUHA_reg', True, frequency = 5)
lduha_reg_Instr.setMachineCode(mem_format1, {'op3': [0, 1, 0, 0, 1, 0]}, 'TODO')
lduha_reg_Instr.setVarField('rd', ('REGS', 0), 'out')
lduha_reg_Instr.setCode(opCode, 'execute')
lduha_reg_Instr.addTest({}, {}, {})
isa.addInstruction(lduha_reg_Instr)
lda_imm_Instr = trap.Instruction('LDA_imm', True, frequency = 5)
lda_imm_Instr.setMachineCode(mem_format2, {'op3': [0, 1, 0, 0, 0, 0]}, 'TODO')
lda_imm_Instr.setVarField('rd', ('REGS', 0), 'out')
lda_imm_Instr.setCode(opCode, 'execute')
lda_imm_Instr.addTest({}, {}, {})
isa.addInstruction(lda_imm_Instr)
lda_reg_Instr = trap.Instruction('LDA_reg', True, frequency = 5)
lda_reg_Instr.setMachineCode(mem_format1, {'op3': [0, 1, 0, 0, 0, 0]}, 'TODO')
lda_reg_Instr.setVarField('rd', ('REGS', 0), 'out')
lda_reg_Instr.setCode(opCode, 'execute')
lda_reg_Instr.addTest({}, {}, {})
isa.addInstruction(lda_reg_Instr)
ldda_imm_Instr = trap.Instruction('LDDA_imm', True, frequency = 5)
ldda_imm_Instr.setMachineCode(mem_format2, {'op3': [0, 1, 0, 0, 1, 1]}, 'TODO')
ldda_imm_Instr.setVarField('rd', ('REGS', 0), 'out')
ldda_imm_Instr.setCode(opCode, 'execute')
ldda_imm_Instr.addTest({}, {}, {})
isa.addInstruction(ldda_imm_Instr)
ldda_reg_Instr = trap.Instruction('LDDA_reg', True, frequency = 5)
ldda_reg_Instr.setMachineCode(mem_format1, {'op3': [0, 1, 0, 0, 1, 1]}, 'TODO')
ldda_reg_Instr.setVarField('rd', ('REGS', 0), 'out')
ldda_reg_Instr.setCode(opCode, 'execute')
ldda_reg_Instr.addTest({}, {}, {})
isa.addInstruction(ldda_reg_Instr)

# Store integer instructions
stb_imm_Instr = trap.Instruction('STB_imm', True, frequency = 5)
stb_imm_Instr.setMachineCode(mem_format2, {'op3': [0, 0, 0, 1, 0, 1]}, 'TODO')
stb_imm_Instr.setVarField('rd', ('REGS', 0), 'in')
stb_imm_Instr.setCode(opCode, 'execute')
stb_imm_Instr.addTest({}, {}, {})
isa.addInstruction(stb_imm_Instr)
stb_reg_Instr = trap.Instruction('STB_reg', True, frequency = 5)
stb_reg_Instr.setMachineCode(mem_format1, {'op3': [0, 0, 0, 1, 0, 1]}, 'TODO')
stb_reg_Instr.setVarField('rd', ('REGS', 0), 'in')
stb_reg_Instr.setCode(opCode, 'execute')
stb_reg_Instr.addTest({}, {}, {})
isa.addInstruction(stb_reg_Instr)
sth_imm_Instr = trap.Instruction('STH_imm', True, frequency = 5)
sth_imm_Instr.setMachineCode(mem_format2, {'op3': [0, 0, 0, 1, 1, 0]}, 'TODO')
sth_imm_Instr.setVarField('rd', ('REGS', 0), 'in')
sth_imm_Instr.setCode(opCode, 'execute')
sth_imm_Instr.addTest({}, {}, {})
isa.addInstruction(sth_imm_Instr)
sth_reg_Instr = trap.Instruction('STH_reg', True, frequency = 5)
sth_reg_Instr.setMachineCode(mem_format1, {'op3': [0, 0, 0, 1, 1, 0]}, 'TODO')
sth_reg_Instr.setVarField('rd', ('REGS', 0), 'in')
sth_reg_Instr.setCode(opCode, 'execute')
sth_reg_Instr.addTest({}, {}, {})
isa.addInstruction(sth_reg_Instr)
st_imm_Instr = trap.Instruction('ST_imm', True, frequency = 5)
st_imm_Instr.setMachineCode(mem_format2, {'op3': [0, 0, 0, 1, 0, 0]}, 'TODO')
st_imm_Instr.setVarField('rd', ('REGS', 0), 'in')
st_imm_Instr.setCode(opCode, 'execute')
st_imm_Instr.addTest({}, {}, {})
isa.addInstruction(st_imm_Instr)
st_reg_Instr = trap.Instruction('ST_reg', True, frequency = 5)
st_reg_Instr.setMachineCode(mem_format1, {'op3': [0, 0, 0, 1, 0, 0]}, 'TODO')
st_reg_Instr.setVarField('rd', ('REGS', 0), 'in')
st_reg_Instr.setCode(opCode, 'execute')
st_reg_Instr.addTest({}, {}, {})
isa.addInstruction(st_reg_Instr)
std_imm_Instr = trap.Instruction('STD_imm', True, frequency = 5)
std_imm_Instr.setMachineCode(mem_format2, {'op3': [0, 0, 0, 1, 1, 1]}, 'TODO')
std_imm_Instr.setVarField('rd', ('REGS', 0), 'in')
std_imm_Instr.setCode(opCode, 'execute')
std_imm_Instr.addTest({}, {}, {})
isa.addInstruction(std_imm_Instr)
std_reg_Instr = trap.Instruction('STD_reg', True, frequency = 5)
std_reg_Instr.setMachineCode(mem_format1, {'op3': [0, 0, 0, 1, 1, 1]}, 'TODO')
std_reg_Instr.setVarField('rd', ('REGS', 0), 'in')
std_reg_Instr.setCode(opCode, 'execute')
std_reg_Instr.addTest({}, {}, {})
isa.addInstruction(std_reg_Instr)
stba_imm_Instr = trap.Instruction('STBA_imm', True, frequency = 5)
stba_imm_Instr.setMachineCode(mem_format2, {'op3': [0, 1, 0, 1, 0, 1]}, 'TODO')
stba_imm_Instr.setVarField('rd', ('REGS', 0), 'in')
stba_imm_Instr.setCode(opCode, 'execute')
stba_imm_Instr.addTest({}, {}, {})
isa.addInstruction(stba_imm_Instr)
stba_reg_Instr = trap.Instruction('STBA_reg', True, frequency = 5)
stba_reg_Instr.setMachineCode(mem_format1, {'op3': [0, 1, 0, 1, 0, 1]}, 'TODO')
stba_reg_Instr.setVarField('rd', ('REGS', 0), 'in')
stba_reg_Instr.setCode(opCode, 'execute')
stba_reg_Instr.addTest({}, {}, {})
isa.addInstruction(stba_reg_Instr)
stha_imm_Instr = trap.Instruction('STHA_imm', True, frequency = 5)
stha_imm_Instr.setMachineCode(mem_format2, {'op3': [0, 1, 0, 1, 1, 0]}, 'TODO')
stha_imm_Instr.setVarField('rd', ('REGS', 0), 'in')
stha_imm_Instr.setCode(opCode, 'execute')
stha_imm_Instr.addTest({}, {}, {})
isa.addInstruction(stha_imm_Instr)
stha_reg_Instr = trap.Instruction('STHA_reg', True, frequency = 5)
stha_reg_Instr.setMachineCode(mem_format1, {'op3': [0, 1, 0, 1, 1, 0]}, 'TODO')
stha_reg_Instr.setVarField('rd', ('REGS', 0), 'in')
stha_reg_Instr.setCode(opCode, 'execute')
stha_reg_Instr.addTest({}, {}, {})
isa.addInstruction(stha_reg_Instr)
sta_imm_Instr = trap.Instruction('STA_imm', True, frequency = 5)
sta_imm_Instr.setMachineCode(mem_format2, {'op3': [0, 1, 0, 1, 0, 0]}, 'TODO')
sta_imm_Instr.setVarField('rd', ('REGS', 0), 'in')
sta_imm_Instr.setCode(opCode, 'execute')
sta_imm_Instr.addTest({}, {}, {})
isa.addInstruction(sta_imm_Instr)
sta_reg_Instr = trap.Instruction('STA_reg', True, frequency = 5)
sta_reg_Instr.setMachineCode(mem_format1, {'op3': [0, 1, 0, 1, 0, 0]}, 'TODO')
sta_reg_Instr.setVarField('rd', ('REGS', 0), 'in')
sta_reg_Instr.setCode(opCode, 'execute')
sta_reg_Instr.addTest({}, {}, {})
isa.addInstruction(sta_reg_Instr)
stda_imm_Instr = trap.Instruction('STDA_imm', True, frequency = 5)
stda_imm_Instr.setMachineCode(mem_format2, {'op3': [0, 1, 0, 1, 1, 1]}, 'TODO')
stda_imm_Instr.setVarField('rd', ('REGS', 0), 'in')
stda_imm_Instr.setCode(opCode, 'execute')
stda_imm_Instr.addTest({}, {}, {})
isa.addInstruction(stda_imm_Instr)
stda_reg_Instr = trap.Instruction('STDA_reg', True, frequency = 5)
stda_reg_Instr.setMachineCode(mem_format1, {'op3': [0, 1, 0, 1, 1, 1]}, 'TODO')
stda_reg_Instr.setVarField('rd', ('REGS', 0), 'in')
stda_reg_Instr.setCode(opCode, 'execute')
stda_reg_Instr.addTest({}, {}, {})
isa.addInstruction(stda_reg_Instr)

# Atomic Load/Store
ldstub_imm_Instr = trap.Instruction('LDSTUB_imm', True, frequency = 5)
ldstub_imm_Instr.setMachineCode(mem_format2, {'op3': [0, 0, 1, 1, 0, 1]}, 'TODO')
ldstub_imm_Instr.setVarField('rd', ('REGS', 0), 'out')
ldstub_imm_Instr.setCode(opCode, 'execute')
ldstub_imm_Instr.addTest({}, {}, {})
isa.addInstruction(ldstub_imm_Instr)
ldstub_reg_Instr = trap.Instruction('LDSTUB_reg', True, frequency = 5)
ldstub_reg_Instr.setMachineCode(mem_format1, {'op3': [0, 0, 1, 1, 0, 1]}, 'TODO')
ldstub_reg_Instr.setVarField('rd', ('REGS', 0), 'out')
ldstub_reg_Instr.setCode(opCode, 'execute')
ldstub_reg_Instr.addTest({}, {}, {})
isa.addInstruction(ldstub_reg_Instr)
ldstuba_imm_Instr = trap.Instruction('LDSTUBA_imm', True, frequency = 5)
ldstuba_imm_Instr.setMachineCode(mem_format2, {'op3': [0, 1, 1, 1, 0, 1]}, 'TODO')
ldstuba_imm_Instr.setVarField('rd', ('REGS', 0), 'out')
ldstuba_imm_Instr.setCode(opCode, 'execute')
ldstuba_imm_Instr.addTest({}, {}, {})
isa.addInstruction(ldstuba_imm_Instr)
ldstuba_reg_Instr = trap.Instruction('LDSTUBA_reg', True, frequency = 5)
ldstuba_reg_Instr.setMachineCode(mem_format1, {'op3': [0, 1, 1, 1, 0, 1]}, 'TODO')
ldstuba_reg_Instr.setVarField('rd', ('REGS', 0), 'out')
ldstuba_reg_Instr.setCode(opCode, 'execute')
ldstuba_reg_Instr.addTest({}, {}, {})
isa.addInstruction(ldstuba_reg_Instr)

# Swap
swap_imm_Instr = trap.Instruction('SWAP_imm', True, frequency = 5)
swap_imm_Instr.setMachineCode(mem_format2, {'op3': [0, 0, 1, 1, 1, 1]}, 'TODO')
swap_imm_Instr.setVarField('rd', ('REGS', 0), 'inout')
swap_imm_Instr.setCode(opCode, 'execute')
swap_imm_Instr.addTest({}, {}, {})
isa.addInstruction(swap_imm_Instr)
swap_reg_Instr = trap.Instruction('SWAP_reg', True, frequency = 5)
swap_reg_Instr.setMachineCode(mem_format1, {'op3': [0, 0, 1, 1, 1, 1]}, 'TODO')
swap_reg_Instr.setVarField('rd', ('REGS', 0), 'inout')
swap_reg_Instr.setCode(opCode, 'execute')
swap_reg_Instr.addTest({}, {}, {})
isa.addInstruction(swap_reg_Instr)
swapa_imm_Instr = trap.Instruction('SWAPA_imm', True, frequency = 5)
swapa_imm_Instr.setMachineCode(mem_format2, {'op3': [0, 1, 1, 1, 1, 1]}, 'TODO')
swapa_imm_Instr.setVarField('rd', ('REGS', 0), 'inout')
swapa_imm_Instr.setCode(opCode, 'execute')
swapa_imm_Instr.addTest({}, {}, {})
isa.addInstruction(swapa_imm_Instr)
swapa_reg_Instr = trap.Instruction('SWAPA_reg', True, frequency = 5)
swapa_reg_Instr.setMachineCode(mem_format1, {'op3': [0, 1, 1, 1, 1, 1]}, 'TODO')
swapa_reg_Instr.setVarField('rd', ('REGS', 0), 'inout')
swapa_reg_Instr.setCode(opCode, 'execute')
swapa_reg_Instr.addTest({}, {}, {})
isa.addInstruction(swapa_reg_Instr)

# sethi
opCodeWb = cxx_writer.Code("""
rd = result;
""")
opCodeExec = cxx_writer.Code("""
result = 0xfffffc00 & (imm22 << 10);
""")
sethi_Instr = trap.Instruction('SETHI', True, frequency = 5)
sethi_Instr.setMachineCode(b_sethi_format1, {'op2': [1, 0, 0]}, 'TODO')
sethi_Instr.setCode(opCodeExec, 'execute')
sethi_Instr.setCode(opCodeWb, 'wb')
sethi_Instr.addBehavior(IncrementPC, 'fetch')
sethi_Instr.addVariable(('result', 'BIT<32>'))
sethi_Instr.addTest({'rd': 0, 'imm22': 0xfff}, {'PC' : 0x0, 'NPC' : 0x4}, {'REGS[0]' : 0, 'PC' : 0x8, 'NPC' : 0x8})
sethi_Instr.addTest({'rd': 1, 'imm22': 0xfff}, {'REGS[1]' : 0xaaaaaaaa, 'PC' : 0x0, 'NPC' : 0x4}, {'REGS[1]' : 0x003ffc00, 'PC' : 0x8, 'NPC' : 0x8})
sethi_Instr.addTest({'rd': 20, 'imm22': 0x3fffff}, {'REGS[20]' : 0xaaaaaaaa, 'PC' : 0x0, 'NPC' : 0x4}, {'REGS[20]' : 0xfffffc00, 'PC' : 0x8, 'NPC' : 0x8})
isa.addInstruction(sethi_Instr)

# Logical Instructions
opCodeReadRegs1 = cxx_writer.Code("""
rs1_op = rs1;
""")
opCodeReadRegs2 = cxx_writer.Code("""
rs1_op = rs1;
rs2_op = rs2;
""")
opCodeExecImm = cxx_writer.Code("""
result = rs1_op & SignExtend(simm13, 13);
""")
and_imm_Instr = trap.Instruction('AND_imm', True, frequency = 5)
and_imm_Instr.setMachineCode(dpi_format2, {'op3': [0, 0, 0, 0, 0, 1]}, 'TODO')
and_imm_Instr.setCode(opCodeExecImm, 'execute')
and_imm_Instr.setCode(opCodeReadRegs1, 'regs')
and_imm_Instr.setCode(opCodeWb, 'wb')
and_imm_Instr.addBehavior(IncrementPC, 'fetch')
and_imm_Instr.addVariable(('result', 'BIT<32>'))
and_imm_Instr.addVariable(('rs1_op', 'BIT<32>'))
and_imm_Instr.addTest({'rd': 0, 'rs1': 10, 'simm13': 0xfff}, {'REGS[10]' : 0xffffffff, 'PC' : 0x0, 'NPC' : 0x4}, {'REGS[10]' : 0xffffffff, 'REGS[0]' : 0, 'PC' : 0x8, 'NPC' : 0x8})
and_imm_Instr.addTest({'rd': 1, 'rs1': 10, 'simm13': 0xfff}, {'REGS[10]' : 0xffffffff, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4}, {'REGS[1]' : 0x0fff, 'PC' : 0x8, 'NPC' : 0x8})
and_imm_Instr.addTest({'rd': 1, 'rs1': 10, 'simm13': 0x1fff}, {'REGS[10]' : 0xffffffff, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4}, {'REGS[1]' : 0xffffffff, 'PC' : 0x8, 'NPC' : 0x8})
and_imm_Instr.addTest({'rd': 10, 'rs1': 10, 'simm13': 0xfff}, {'REGS[10]' : 0x88888888, 'PC' : 0x0, 'NPC' : 0x4}, {'REGS[10]' : 0x0888, 'PC' : 0x8, 'NPC' : 0x8})
isa.addInstruction(and_imm_Instr)
opCodeExecReg = cxx_writer.Code("""
result = rs1_op & rs2_op;
""")
and_reg_Instr = trap.Instruction('AND_reg', True, frequency = 5)
and_reg_Instr.setMachineCode(dpi_format1, {'op3': [0, 0, 0, 0, 0, 1], 'asi' : [0, 0, 0, 0, 0, 0, 0, 0]}, 'TODO')
and_reg_Instr.setCode(opCodeExecReg, 'execute')
and_reg_Instr.setCode(opCodeReadRegs2, 'regs')
and_reg_Instr.setCode(opCodeWb, 'wb')
and_reg_Instr.addBehavior(IncrementPC, 'fetch')
and_reg_Instr.addVariable(('result', 'BIT<32>'))
and_reg_Instr.addVariable(('rs1_op', 'BIT<32>'))
and_reg_Instr.addVariable(('rs2_op', 'BIT<32>'))
and_reg_Instr.addTest({'rd': 0, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0xfff, 'REGS[10]' : 0xffffffff, 'PC' : 0x0, 'NPC' : 0x4}, {'REGS[10]' : 0xffffffff, 'REGS[0]' : 0, 'PC' : 0x8, 'NPC' : 0x8})
and_reg_Instr.addTest({'rd': 1, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0xfff, 'REGS[10]' : 0xffffffff, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4}, {'REGS[1]' : 0x0fff, 'PC' : 0x8, 'NPC' : 0x8})
and_reg_Instr.addTest({'rd': 1, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0x1fff, 'REGS[10]' : 0xffffffff, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4}, {'REGS[1]' : 0xffffffff, 'PC' : 0x8, 'NPC' : 0x8})
and_reg_Instr.addTest({'rd': 10, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0xfff, 'REGS[10]' : 0x88888888, 'PC' : 0x0, 'NPC' : 0x4}, {'REGS[10]' : 0x0888, 'PC' : 0x8, 'NPC' : 0x8})
isa.addInstruction(and_reg_Instr)
andcc_imm_Instr = trap.Instruction('ANDcc_imm', True, frequency = 5)
andcc_imm_Instr.setMachineCode(dpi_format2, {'op3': [0, 1, 0, 0, 0, 1]}, 'TODO')
andcc_imm_Instr.setCode(opCodeExecImm, 'execute')
andcc_imm_Instr.setCode(opCodeReadRegs1, 'regs')
andcc_imm_Instr.setCode(opCodeWb, 'wb')
andcc_imm_Instr.addBehavior(IncrementPC, 'fetch')
andcc_imm_Instr.addBehavior(ICC_writeLogic, 'execute')
andcc_imm_Instr.addVariable(('result', 'BIT<32>'))
andcc_imm_Instr.addVariable(('rs1_op', 'BIT<32>'))
andcc_imm_Instr.addTest({'rd': 0, 'rs1': 10, 'simm13': 0xfff}, {'REGS[10]' : 0xffffffff, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[10]' : 0xffffffff, 'REGS[0]' : 0, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x00400000})
andcc_imm_Instr.addTest({'rd': 1, 'rs1': 10, 'simm13': 0xfff}, {'REGS[10]' : 0xffffffff, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0x0fff, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x00400000})
andcc_imm_Instr.addTest({'rd': 1, 'rs1': 10, 'simm13': 0x1fff}, {'REGS[10]' : 0xffffffff, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0xffffffff, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x00c00000})
andcc_imm_Instr.addTest({'rd': 10, 'rs1': 10, 'simm13': 0xfff}, {'REGS[10]' : 0x88888888, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[10]' : 0x0888, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x00400000})
andcc_imm_Instr.addTest({'rd': 10, 'rs1': 10, 'simm13': 0x0}, {'REGS[10]' : 0x88888888, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[10]' : 0x0, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x0})
isa.addInstruction(andcc_imm_Instr)
andcc_reg_Instr = trap.Instruction('ANDcc_reg', True, frequency = 5)
andcc_reg_Instr.setMachineCode(dpi_format1, {'op3': [0, 1, 0, 0, 0, 1], 'asi' : [0, 0, 0, 0, 0, 0, 0, 0]}, 'TODO')
andcc_reg_Instr.setCode(opCodeExecReg, 'execute')
andcc_reg_Instr.setCode(opCodeReadRegs2, 'regs')
andcc_reg_Instr.setCode(opCodeWb, 'wb')
andcc_reg_Instr.addBehavior(IncrementPC, 'fetch')
andcc_reg_Instr.addBehavior(ICC_writeLogic, 'execute')
andcc_reg_Instr.addVariable(('result', 'BIT<32>'))
andcc_reg_Instr.addVariable(('rs1_op', 'BIT<32>'))
andcc_reg_Instr.addVariable(('rs2_op', 'BIT<32>'))
andcc_imm_Instr.addTest({'rd': 0, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0xfff, 'REGS[10]' : 0xffffffff, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[10]' : 0xffffffff, 'REGS[0]' : 0, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x00400000})
andcc_imm_Instr.addTest({'rd': 1, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0xfff, 'REGS[10]' : 0xffffffff, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0x0fff, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x00400000})
andcc_imm_Instr.addTest({'rd': 1, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0x1fff, 'REGS[10]' : 0xffffffff, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0xffffffff, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x00c00000})
andcc_imm_Instr.addTest({'rd': 10, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0xfff, 'REGS[10]' : 0x88888888, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[10]' : 0x0888, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x00400000})
andcc_imm_Instr.addTest({'rd': 10, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0x0, 'REGS[10]' : 0x88888888, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[10]' : 0x0, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x0})
isa.addInstruction(andcc_reg_Instr)
opCodeExecImm = cxx_writer.Code("""
result = rs1_op & ~(SignExtend(simm13, 13));
""")
andn_imm_Instr = trap.Instruction('ANDN_imm', True, frequency = 5)
andn_imm_Instr.setMachineCode(dpi_format2, {'op3': [0, 0, 0, 1, 0, 1]}, 'TODO')
andn_imm_Instr.setCode(opCodeExecImm, 'execute')
andn_imm_Instr.setCode(opCodeReadRegs1, 'regs')
andn_imm_Instr.setCode(opCodeWb, 'wb')
andn_imm_Instr.addBehavior(IncrementPC, 'fetch')
andn_imm_Instr.addVariable(('result', 'BIT<32>'))
andn_imm_Instr.addVariable(('rs1_op', 'BIT<32>'))
andn_imm_Instr.addTest({'rd': 0, 'rs1': 10, 'simm13': 0xfff}, {'REGS[10]' : 0xffffffff, 'PC' : 0x0, 'NPC' : 0x4}, {'REGS[10]' : 0xffffffff, 'REGS[0]' : 0, 'PC' : 0x8, 'NPC' : 0x8})
andn_imm_Instr.addTest({'rd': 1, 'rs1': 10, 'simm13': 0xfff}, {'REGS[10]' : 0xffffffff, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4}, {'REGS[1]' : 0xfffff000, 'PC' : 0x8, 'NPC' : 0x8})
andn_imm_Instr.addTest({'rd': 1, 'rs1': 10, 'simm13': 0x1fff}, {'REGS[10]' : 0xffffffff, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4}, {'REGS[1]' : 0x0, 'PC' : 0x8, 'NPC' : 0x8})
andn_imm_Instr.addTest({'rd': 10, 'rs1': 10, 'simm13': 0xfff}, {'REGS[10]' : 0x88888888, 'PC' : 0x0, 'NPC' : 0x4}, {'REGS[10]' : 0x88888000, 'PC' : 0x8, 'NPC' : 0x8})
isa.addInstruction(andn_imm_Instr)
opCodeExecReg = cxx_writer.Code("""
result = rs1_op & ~rs2_op;
""")
andn_reg_Instr = trap.Instruction('ANDN_reg', True, frequency = 5)
andn_reg_Instr.setMachineCode(dpi_format1, {'op3': [0, 0, 0, 1, 0, 1], 'asi' : [0, 0, 0, 0, 0, 0, 0, 0]}, 'TODO')
andn_reg_Instr.setCode(opCodeExecReg, 'execute')
andn_reg_Instr.setCode(opCodeReadRegs2, 'regs')
andn_reg_Instr.setCode(opCodeWb, 'wb')
andn_reg_Instr.addBehavior(IncrementPC, 'fetch')
andn_reg_Instr.addVariable(('result', 'BIT<32>'))
andn_reg_Instr.addVariable(('rs1_op', 'BIT<32>'))
andn_reg_Instr.addVariable(('rs2_op', 'BIT<32>'))
andn_reg_Instr.addTest({'rd': 0, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0xfff, 'REGS[10]' : 0xffffffff, 'PC' : 0x0, 'NPC' : 0x4}, {'REGS[10]' : 0xffffffff, 'REGS[0]' : 0, 'PC' : 0x8, 'NPC' : 0x8})
andn_reg_Instr.addTest({'rd': 1, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0xfff, 'REGS[10]' : 0xffffffff, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4}, {'REGS[1]' : 0xfffff000, 'PC' : 0x8, 'NPC' : 0x8})
andn_reg_Instr.addTest({'rd': 1, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0x1fff, 'REGS[10]' : 0xffffffff, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4}, {'REGS[1]' : 0x0, 'PC' : 0x8, 'NPC' : 0x8})
andn_reg_Instr.addTest({'rd': 10, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0xfff, 'REGS[10]' : 0x88888888, 'PC' : 0x0, 'NPC' : 0x4}, {'REGS[10]' : 0x88888000, 'PC' : 0x8, 'NPC' : 0x8})
isa.addInstruction(andn_reg_Instr)
andncc_imm_Instr = trap.Instruction('ANDNcc_imm', True, frequency = 5)
andncc_imm_Instr.setMachineCode(dpi_format2, {'op3': [0, 1, 0, 1, 0, 1]}, 'TODO')
andncc_imm_Instr.setCode(opCodeExecImm, 'execute')
andncc_imm_Instr.setCode(opCodeReadRegs1, 'regs')
andncc_imm_Instr.setCode(opCodeWb, 'wb')
andncc_imm_Instr.addBehavior(IncrementPC, 'fetch')
andncc_imm_Instr.addBehavior(ICC_writeLogic, 'execute')
andncc_imm_Instr.addVariable(('result', 'BIT<32>'))
andncc_imm_Instr.addVariable(('rs1_op', 'BIT<32>'))
andncc_imm_Instr.addTest({'rd': 0, 'rs1': 10, 'simm13': 0xfff}, {'REGS[10]' : 0xffffffff, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[10]' : 0xffffffff, 'REGS[0]' : 0, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x00a00000})
andncc_imm_Instr.addTest({'rd': 1, 'rs1': 10, 'simm13': 0xfff}, {'REGS[10]' : 0xffffffff, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0xfffff000, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x00a00000})
andncc_imm_Instr.addTest({'rd': 1, 'rs1': 10, 'simm13': 0x1fff}, {'REGS[10]' : 0xffffffff, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0x0, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x00000000})
andncc_imm_Instr.addTest({'rd': 10, 'rs1': 10, 'simm13': 0xfff}, {'REGS[10]' : 0x88888888, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[10]' : 0x88888000, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x00a00000})
isa.addInstruction(andncc_imm_Instr)
andncc_reg_Instr = trap.Instruction('ANDNcc_reg', True, frequency = 5)
andncc_reg_Instr.setMachineCode(dpi_format1, {'op3': [0, 1, 0, 1, 0, 1], 'asi' : [0, 0, 0, 0, 0, 0, 0, 0]}, 'TODO')
andncc_reg_Instr.setCode(opCodeExecReg, 'execute')
andncc_reg_Instr.setCode(opCodeReadRegs2, 'regs')
andncc_reg_Instr.setCode(opCodeWb, 'wb')
andncc_reg_Instr.addBehavior(IncrementPC, 'fetch')
andncc_reg_Instr.addBehavior(ICC_writeLogic, 'execute')
andncc_reg_Instr.addVariable(('result', 'BIT<32>'))
andncc_reg_Instr.addVariable(('rs1_op', 'BIT<32>'))
andncc_reg_Instr.addVariable(('rs2_op', 'BIT<32>'))
andncc_reg_Instr.addTest({'rd': 0, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0xfff, 'REGS[10]' : 0xffffffff, 'PC' : 0x0, 'NPC' : 0x4}, {'REGS[10]' : 0xffffffff, 'REGS[0]' : 0, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x00a00000})
andncc_reg_Instr.addTest({'rd': 1, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0xfff, 'REGS[10]' : 0xffffffff, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4}, {'REGS[1]' : 0xfffff000, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x00a00000})
andncc_reg_Instr.addTest({'rd': 1, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0x1fff, 'REGS[10]' : 0xffffffff, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4}, {'REGS[1]' : 0x0, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x0})
andncc_reg_Instr.addTest({'rd': 10, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0xfff, 'REGS[10]' : 0x88888888, 'PC' : 0x0, 'NPC' : 0x4}, {'REGS[10]' : 0x88888000, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x00a00000})
isa.addInstruction(andncc_reg_Instr)
opCodeExecImm = cxx_writer.Code("""
result = rs1_op | SignExtend(simm13, 13);
""")
or_imm_Instr = trap.Instruction('OR_imm', True, frequency = 5)
or_imm_Instr.setMachineCode(dpi_format2, {'op3': [0, 0, 0, 0, 1, 0]}, 'TODO')
or_imm_Instr.setCode(opCodeExecImm, 'execute')
or_imm_Instr.setCode(opCodeReadRegs1, 'regs')
or_imm_Instr.setCode(opCodeWb, 'wb')
or_imm_Instr.addBehavior(IncrementPC, 'fetch')
or_imm_Instr.addVariable(('result', 'BIT<32>'))
or_imm_Instr.addVariable(('rs1_op', 'BIT<32>'))
or_imm_Instr.addTest({'rd': 0, 'rs1': 10, 'simm13': 0xfff}, {'REGS[10]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[10]' : 0x0, 'REGS[0]' : 0, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x0})
or_imm_Instr.addTest({'rd': 1, 'rs1': 10, 'simm13': 0xfff}, {'REGS[10]' : 0x0, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0xfff, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x0})
or_imm_Instr.addTest({'rd': 1, 'rs1': 10, 'simm13': 0xfff}, {'REGS[10]' : 0xffffffff, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0xffffffff, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x0})
or_imm_Instr.addTest({'rd': 1, 'rs1': 10, 'simm13': 0x1fff}, {'REGS[10]' : 0x0, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0xffffffff, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x0})
or_imm_Instr.addTest({'rd': 10, 'rs1': 10, 'simm13': 0xf0f}, {'REGS[10]' : 0x88888888, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[10]' : 0x88888f8f, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x0})
isa.addInstruction(or_imm_Instr)
opCodeExecReg = cxx_writer.Code("""
result = rs1_op | rs2_op;
""")
or_reg_Instr = trap.Instruction('OR_reg', True, frequency = 5)
or_reg_Instr.setMachineCode(dpi_format1, {'op3': [0, 0, 0, 0, 1, 0], 'asi' : [0, 0, 0, 0, 0, 0, 0, 0]}, 'TODO')
or_reg_Instr.setCode(opCodeExecReg, 'execute')
or_reg_Instr.setCode(opCodeReadRegs2, 'regs')
or_reg_Instr.setCode(opCodeWb, 'wb')
or_reg_Instr.addBehavior(IncrementPC, 'fetch')
or_reg_Instr.addVariable(('result', 'BIT<32>'))
or_reg_Instr.addVariable(('rs1_op', 'BIT<32>'))
or_reg_Instr.addVariable(('rs2_op', 'BIT<32>'))
or_reg_Instr.addTest({'rd': 0, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0xfff, 'REGS[10]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[10]' : 0x0, 'REGS[0]' : 0, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x0})
or_reg_Instr.addTest({'rd': 1, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0xfff, 'REGS[10]' : 0x0, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0xfff, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x0})
or_reg_Instr.addTest({'rd': 1, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0xfff, 'REGS[10]' : 0xffffffff, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0xffffffff, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x0})
or_reg_Instr.addTest({'rd': 1, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0x1fff, 'REGS[10]' : 0x0, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0xffffffff, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x0})
or_reg_Instr.addTest({'rd': 10, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0xf0f, 'REGS[10]' : 0x88888888, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[10]' : 0x88888f8f, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x0})
isa.addInstruction(or_reg_Instr)
orcc_imm_Instr = trap.Instruction('ORcc_imm', True, frequency = 5)
orcc_imm_Instr.setMachineCode(dpi_format2, {'op3': [0, 1, 0, 0, 1, 0]}, 'TODO')
orcc_imm_Instr.setCode(opCodeExecImm, 'execute')
orcc_imm_Instr.setCode(opCodeReadRegs1, 'regs')
orcc_imm_Instr.setCode(opCodeWb, 'wb')
orcc_imm_Instr.addBehavior(IncrementPC, 'fetch')
orcc_imm_Instr.addBehavior(ICC_writeLogic, 'execute')
orcc_imm_Instr.addVariable(('result', 'BIT<32>'))
orcc_imm_Instr.addVariable(('rs1_op', 'BIT<32>'))
orcc_imm_Instr.addTest({'rd': 0, 'rs1': 10, 'simm13': 0xfff}, {'REGS[10]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[10]' : 0x0, 'REGS[0]' : 0, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x00400000})
orcc_imm_Instr.addTest({'rd': 1, 'rs1': 10, 'simm13': 0xfff}, {'REGS[10]' : 0x0, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0xfff, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x00400000})
orcc_imm_Instr.addTest({'rd': 1, 'rs1': 10, 'simm13': 0xfff}, {'REGS[10]' : 0xffffffff, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0xffffffff, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x00c00000})
orcc_imm_Instr.addTest({'rd': 1, 'rs1': 10, 'simm13': 0x1fff}, {'REGS[10]' : 0x0, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0xffffffff, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x00c00000})
orcc_imm_Instr.addTest({'rd': 10, 'rs1': 10, 'simm13': 0xf0f}, {'REGS[10]' : 0x88888888, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[10]' : 0x88888f8f, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x00c00000})
isa.addInstruction(orcc_imm_Instr)
orcc_reg_Instr = trap.Instruction('ORcc_reg', True, frequency = 5)
orcc_reg_Instr.setMachineCode(dpi_format1, {'op3': [0, 1, 0, 0, 1, 0], 'asi' : [0, 0, 0, 0, 0, 0, 0, 0]}, 'TODO')
orcc_reg_Instr.setCode(opCodeExecReg, 'execute')
orcc_reg_Instr.setCode(opCodeReadRegs2, 'regs')
orcc_reg_Instr.setCode(opCodeWb, 'wb')
orcc_reg_Instr.addBehavior(IncrementPC, 'fetch')
orcc_reg_Instr.addBehavior(ICC_writeLogic, 'execute')
orcc_reg_Instr.addVariable(('result', 'BIT<32>'))
orcc_reg_Instr.addVariable(('rs1_op', 'BIT<32>'))
orcc_reg_Instr.addVariable(('rs2_op', 'BIT<32>'))
orcc_reg_Instr.addTest({'rd': 0, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0xfff, 'REGS[10]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[10]' : 0x0, 'REGS[0]' : 0, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x00400000})
orcc_reg_Instr.addTest({'rd': 1, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0xfff, 'REGS[10]' : 0x0, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0xfff, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x00400000})
orcc_reg_Instr.addTest({'rd': 1, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0xfff, 'REGS[10]' : 0xffffffff, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0xffffffff, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x00c00000})
orcc_reg_Instr.addTest({'rd': 1, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0x1fff, 'REGS[10]' : 0x0, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0xffffffff, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x00c00000})
orcc_reg_Instr.addTest({'rd': 10, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0xf0f, 'REGS[10]' : 0x88888888, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[10]' : 0x88888f8f, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x00c00000})
isa.addInstruction(orcc_reg_Instr)
opCodeExecImm = cxx_writer.Code("""
result = rs1_op | ~(SignExtend(simm13, 13));
""")
orn_imm_Instr = trap.Instruction('ORN_imm', True, frequency = 5)
orn_imm_Instr.setMachineCode(dpi_format2, {'op3': [0, 0, 0, 1, 1, 0]}, 'TODO')
orn_imm_Instr.setCode(opCodeExecImm, 'execute')
orn_imm_Instr.setCode(opCodeReadRegs1, 'regs')
orn_imm_Instr.setCode(opCodeWb, 'wb')
orn_imm_Instr.addBehavior(IncrementPC, 'fetch')
orn_imm_Instr.addVariable(('result', 'BIT<32>'))
orn_imm_Instr.addVariable(('rs1_op', 'BIT<32>'))
orn_imm_Instr.addTest({'rd': 0, 'rs1': 10, 'simm13': 0xfff}, {'REGS[10]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[10]' : 0x0, 'REGS[0]' : 0, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x0})
orn_imm_Instr.addTest({'rd': 1, 'rs1': 10, 'simm13': 0xfff}, {'REGS[10]' : 0x0, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0xfffff000, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x0})
orn_imm_Instr.addTest({'rd': 1, 'rs1': 10, 'simm13': 0xfff}, {'REGS[10]' : 0xffffffff, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0xffffffff, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x0})
orn_imm_Instr.addTest({'rd': 1, 'rs1': 10, 'simm13': 0x1fff}, {'REGS[10]' : 0x0, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0x0, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x0})
orn_imm_Instr.addTest({'rd': 10, 'rs1': 10, 'simm13': 0xf0f}, {'REGS[10]' : 0x88888888, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[10]' : 0x888888f8, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x0})
isa.addInstruction(orn_imm_Instr)
opCodeExecReg = cxx_writer.Code("""
result = rs1_op | ~rs2_op;
""")
orn_reg_Instr = trap.Instruction('ORN_reg', True, frequency = 5)
orn_reg_Instr.setMachineCode(dpi_format1, {'op3': [0, 0, 0, 1, 1, 0], 'asi' : [0, 0, 0, 0, 0, 0, 0, 0]}, 'TODO')
orn_reg_Instr.setCode(opCodeExecReg, 'execute')
orn_reg_Instr.setCode(opCodeReadRegs2, 'regs')
orn_reg_Instr.setCode(opCodeWb, 'wb')
orn_reg_Instr.addBehavior(IncrementPC, 'fetch')
orn_reg_Instr.addVariable(('result', 'BIT<32>'))
orn_reg_Instr.addVariable(('rs1_op', 'BIT<32>'))
orn_reg_Instr.addVariable(('rs2_op', 'BIT<32>'))
orn_reg_Instr.addTest({'rd': 0, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0xfff, 'REGS[10]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[10]' : 0x0, 'REGS[0]' : 0, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x0})
orn_reg_Instr.addTest({'rd': 1, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0xfff, 'REGS[10]' : 0x0, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0xfffff000, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x0})
orn_reg_Instr.addTest({'rd': 1, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0xfff, 'REGS[10]' : 0xffffffff, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0xffffffff, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x0})
orn_reg_Instr.addTest({'rd': 1, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0x1fff, 'REGS[10]' : 0x0, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0x0, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x0})
orn_reg_Instr.addTest({'rd': 10, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0xf0f, 'REGS[10]' : 0x88888888, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[10]' : 0x888888f8, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x0})
isa.addInstruction(orn_reg_Instr)
orncc_imm_Instr = trap.Instruction('ORNcc_imm', True, frequency = 5)
orncc_imm_Instr.setMachineCode(dpi_format2, {'op3': [0, 1, 0, 1, 1, 0]}, 'TODO')
orncc_imm_Instr.setCode(opCodeExecImm, 'execute')
orncc_imm_Instr.setCode(opCodeReadRegs1, 'regs')
orncc_imm_Instr.setCode(opCodeWb, 'wb')
orncc_imm_Instr.addBehavior(IncrementPC, 'fetch')
orncc_imm_Instr.addBehavior(ICC_writeLogic, 'execute')
orncc_imm_Instr.addVariable(('result', 'BIT<32>'))
orncc_imm_Instr.addVariable(('rs1_op', 'BIT<32>'))
orncc_imm_Instr.addTest({'rd': 0, 'rs1': 10, 'simm13': 0xfff}, {'REGS[10]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[10]' : 0x0, 'REGS[0]' : 0, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x00c00000})
orncc_imm_Instr.addTest({'rd': 1, 'rs1': 10, 'simm13': 0xfff}, {'REGS[10]' : 0x0, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0xfffff000, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x00c00000})
orncc_imm_Instr.addTest({'rd': 1, 'rs1': 10, 'simm13': 0xfff}, {'REGS[10]' : 0xffffffff, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0xffffffff, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x00c00000})
orncc_imm_Instr.addTest({'rd': 1, 'rs1': 10, 'simm13': 0x1fff}, {'REGS[10]' : 0x0, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0x0, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x00000000})
orncc_imm_Instr.addTest({'rd': 10, 'rs1': 10, 'simm13': 0xf0f}, {'REGS[10]' : 0x88888888, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[10]' : 0x888888f8, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x00c00000})
isa.addInstruction(orncc_imm_Instr)
orncc_reg_Instr = trap.Instruction('ORNcc_reg', True, frequency = 5)
orncc_reg_Instr.setMachineCode(dpi_format1, {'op3': [0, 1, 0, 1, 1, 0], 'asi' : [0, 0, 0, 0, 0, 0, 0, 0]}, 'TODO')
orncc_reg_Instr.setCode(opCodeExecReg, 'execute')
orncc_reg_Instr.setCode(opCodeReadRegs2, 'regs')
orncc_reg_Instr.setCode(opCodeWb, 'wb')
orncc_reg_Instr.addBehavior(IncrementPC, 'fetch')
orncc_reg_Instr.addBehavior(ICC_writeLogic, 'execute')
orncc_reg_Instr.addVariable(('result', 'BIT<32>'))
orncc_reg_Instr.addVariable(('rs1_op', 'BIT<32>'))
orncc_reg_Instr.addVariable(('rs2_op', 'BIT<32>'))
orncc_reg_Instr.addTest({'rd': 0, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0xfff, 'REGS[10]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[10]' : 0x0, 'REGS[0]' : 0, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x00c00000})
orncc_reg_Instr.addTest({'rd': 1, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0xfff, 'REGS[10]' : 0x0, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0xfffff000, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x00c00000})
orncc_reg_Instr.addTest({'rd': 1, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0xfff, 'REGS[10]' : 0xffffffff, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0xffffffff, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x00c00000})
orncc_reg_Instr.addTest({'rd': 1, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0x1fff, 'REGS[10]' : 0x0, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0x0, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x0})
orncc_reg_Instr.addTest({'rd': 10, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0xf0f, 'REGS[10]' : 0x88888888, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[10]' : 0x888888f8, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x00c00000})
isa.addInstruction(orncc_reg_Instr)
opCodeExecImm = cxx_writer.Code("""
result = rs1_op ^ SignExtend(simm13, 13);
""")
xor_imm_Instr = trap.Instruction('XOR_imm', True, frequency = 5)
xor_imm_Instr.setMachineCode(dpi_format2, {'op3': [0, 0, 0, 0, 1, 1]}, 'TODO')
xor_imm_Instr.setCode(opCodeExecImm, 'execute')
xor_imm_Instr.setCode(opCodeReadRegs1, 'regs')
xor_imm_Instr.setCode(opCodeWb, 'wb')
xor_imm_Instr.addBehavior(IncrementPC, 'fetch')
xor_imm_Instr.addVariable(('result', 'BIT<32>'))
xor_imm_Instr.addVariable(('rs1_op', 'BIT<32>'))
xor_imm_Instr.addTest({'rd': 0, 'rs1': 10, 'simm13': 0xfff}, {'REGS[10]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[10]' : 0x0, 'REGS[0]' : 0, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x0})
xor_imm_Instr.addTest({'rd': 1, 'rs1': 10, 'simm13': 0xfff}, {'REGS[10]' : 0x0, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0x0fff, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x0})
xor_imm_Instr.addTest({'rd': 1, 'rs1': 10, 'simm13': 0xfff}, {'REGS[10]' : 0xffffffff, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0xfffff000, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x0})
xor_imm_Instr.addTest({'rd': 1, 'rs1': 10, 'simm13': 0x1fff}, {'REGS[10]' : 0x0, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0xffffffff, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x0})
xor_imm_Instr.addTest({'rd': 10, 'rs1': 10, 'simm13': 0xf0f}, {'REGS[10]' : 0x88888888, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[10]' : 0x88888787, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x0})
isa.addInstruction(xor_imm_Instr)
opCodeExecReg = cxx_writer.Code("""
result = rs1_op ^ rs2_op;
""")
xor_reg_Instr = trap.Instruction('XOR_reg', True, frequency = 5)
xor_reg_Instr.setMachineCode(dpi_format1, {'op3': [0, 0, 0, 0, 1, 1], 'asi' : [0, 0, 0, 0, 0, 0, 0, 0]}, 'TODO')
xor_reg_Instr.setCode(opCodeExecReg, 'execute')
xor_reg_Instr.setCode(opCodeReadRegs2, 'regs')
xor_reg_Instr.setCode(opCodeWb, 'wb')
xor_reg_Instr.addBehavior(IncrementPC, 'fetch')
xor_reg_Instr.addVariable(('result', 'BIT<32>'))
xor_reg_Instr.addVariable(('rs1_op', 'BIT<32>'))
xor_reg_Instr.addVariable(('rs2_op', 'BIT<32>'))
xor_reg_Instr.addTest({'rd': 0, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0xfff, 'REGS[10]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[10]' : 0x0, 'REGS[0]' : 0, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x0})
xor_reg_Instr.addTest({'rd': 1, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0xfff, 'REGS[10]' : 0x0, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0x0fff, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x0})
xor_reg_Instr.addTest({'rd': 1, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0xfff, 'REGS[10]' : 0xffffffff, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0xfffff000, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x0})
xor_reg_Instr.addTest({'rd': 1, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0x1fff, 'REGS[10]' : 0x0, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0xffffffff, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x0})
xor_reg_Instr.addTest({'rd': 10, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0xf0f, 'REGS[10]' : 0x88888888, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[10]' : 0x88888787, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x0})
isa.addInstruction(xor_reg_Instr)
xorcc_imm_Instr = trap.Instruction('XORcc_imm', True, frequency = 5)
xorcc_imm_Instr.setMachineCode(dpi_format2, {'op3': [0, 1, 0, 0, 1, 1]}, 'TODO')
xorcc_imm_Instr.setCode(opCodeExecImm, 'execute')
xorcc_imm_Instr.setCode(opCodeReadRegs1, 'regs')
xorcc_imm_Instr.setCode(opCodeWb, 'wb')
xorcc_imm_Instr.addBehavior(IncrementPC, 'fetch')
xorcc_imm_Instr.addBehavior(ICC_writeLogic, 'execute')
xorcc_imm_Instr.addVariable(('result', 'BIT<32>'))
xorcc_imm_Instr.addVariable(('rs1_op', 'BIT<32>'))
xorcc_imm_Instr.addTest({'rd': 0, 'rs1': 10, 'simm13': 0xfff}, {'REGS[10]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[10]' : 0x0, 'REGS[0]' : 0, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x00400000})
xorcc_imm_Instr.addTest({'rd': 1, 'rs1': 10, 'simm13': 0xfff}, {'REGS[10]' : 0x0, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0x0fff, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x00400000})
xorcc_imm_Instr.addTest({'rd': 1, 'rs1': 10, 'simm13': 0xfff}, {'REGS[10]' : 0xffffffff, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0xfffff000, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x00c00000})
xorcc_imm_Instr.addTest({'rd': 1, 'rs1': 10, 'simm13': 0x1fff}, {'REGS[10]' : 0x0, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0xffffffff, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x00c00000})
xorcc_imm_Instr.addTest({'rd': 10, 'rs1': 10, 'simm13': 0xf0f}, {'REGS[10]' : 0x88888888, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[10]' : 0x88888787, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x00c00000})
isa.addInstruction(xorcc_imm_Instr)
xorcc_reg_Instr = trap.Instruction('XORcc_reg', True, frequency = 5)
xorcc_reg_Instr.setMachineCode(dpi_format1, {'op3': [0, 1, 0, 0, 1, 1], 'asi' : [0, 0, 0, 0, 0, 0, 0, 0]}, 'TODO')
xorcc_reg_Instr.setCode(opCodeExecReg, 'execute')
xorcc_reg_Instr.setCode(opCodeReadRegs2, 'regs')
xorcc_reg_Instr.setCode(opCodeWb, 'wb')
xorcc_reg_Instr.addBehavior(IncrementPC, 'fetch')
xorcc_reg_Instr.addBehavior(ICC_writeLogic, 'execute')
xorcc_reg_Instr.addVariable(('result', 'BIT<32>'))
xorcc_reg_Instr.addVariable(('rs1_op', 'BIT<32>'))
xorcc_reg_Instr.addVariable(('rs2_op', 'BIT<32>'))
xorcc_reg_Instr.addTest({'rd': 0, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0xfff, 'REGS[10]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[10]' : 0x0, 'REGS[0]' : 0, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x00400000})
xorcc_reg_Instr.addTest({'rd': 1, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0xfff, 'REGS[10]' : 0x0, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0x0fff, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x00400000})
xorcc_reg_Instr.addTest({'rd': 1, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0xfff, 'REGS[10]' : 0xffffffff, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0xfffff000, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x00c00000})
xorcc_reg_Instr.addTest({'rd': 1, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0x1fff, 'REGS[10]' : 0x0, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0xffffffff, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x00c00000})
xorcc_reg_Instr.addTest({'rd': 10, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0xf0f, 'REGS[10]' : 0x88888888, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[10]' : 0x88888787, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x00c00000})
isa.addInstruction(xorcc_reg_Instr)
opCodeExecImm = cxx_writer.Code("""
result = rs1_op ^ ~(SignExtend(simm13, 13));
""")
xnor_imm_Instr = trap.Instruction('XNOR_imm', True, frequency = 5)
xnor_imm_Instr.setMachineCode(dpi_format2, {'op3': [0, 0, 0, 1, 1, 1]}, 'TODO')
xnor_imm_Instr.setCode(opCodeExecImm, 'execute')
xnor_imm_Instr.setCode(opCodeReadRegs1, 'regs')
xnor_imm_Instr.setCode(opCodeWb, 'wb')
xnor_imm_Instr.addBehavior(IncrementPC, 'fetch')
xnor_imm_Instr.addVariable(('result', 'BIT<32>'))
xnor_imm_Instr.addVariable(('rs1_op', 'BIT<32>'))
xnor_imm_Instr.addTest({'rd': 0, 'rs1': 10, 'simm13': 0xfff}, {'REGS[10]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[10]' : 0x0, 'REGS[0]' : 0, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x0})
xnor_imm_Instr.addTest({'rd': 1, 'rs1': 10, 'simm13': 0xfff}, {'REGS[10]' : 0x0, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0xfffff000, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x0})
xnor_imm_Instr.addTest({'rd': 1, 'rs1': 10, 'simm13': 0xfff}, {'REGS[10]' : 0xffffffff, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0x0fff, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x0})
xnor_imm_Instr.addTest({'rd': 1, 'rs1': 10, 'simm13': 0x1fff}, {'REGS[10]' : 0x0, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0x0, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x0})
xnor_imm_Instr.addTest({'rd': 10, 'rs1': 10, 'simm13': 0xf0f}, {'REGS[10]' : 0x88888888, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[10]' : 0x77777878, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x0})
isa.addInstruction(xnor_imm_Instr)
opCodeExecReg = cxx_writer.Code("""
result = rs1_op ^ ~rs2_op;
""")
xnor_reg_Instr = trap.Instruction('XNOR_reg', True, frequency = 5)
xnor_reg_Instr.setMachineCode(dpi_format1, {'op3': [0, 0, 0, 1, 1, 1], 'asi' : [0, 0, 0, 0, 0, 0, 0, 0]}, 'TODO')
xnor_reg_Instr.setCode(opCodeExecReg, 'execute')
xnor_reg_Instr.setCode(opCodeReadRegs2, 'regs')
xnor_reg_Instr.setCode(opCodeWb, 'wb')
xnor_reg_Instr.addBehavior(IncrementPC, 'fetch')
xnor_reg_Instr.addVariable(('result', 'BIT<32>'))
xnor_reg_Instr.addVariable(('rs1_op', 'BIT<32>'))
xnor_reg_Instr.addVariable(('rs2_op', 'BIT<32>'))
xnor_reg_Instr.addTest({'rd': 0, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0xfff, 'REGS[10]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[10]' : 0x0, 'REGS[0]' : 0, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x0})
xnor_reg_Instr.addTest({'rd': 1, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0xfff, 'REGS[10]' : 0x0, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0xfffff000, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x0})
xnor_reg_Instr.addTest({'rd': 1, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0xfff, 'REGS[10]' : 0xffffffff, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0x0fff, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x0})
xnor_reg_Instr.addTest({'rd': 1, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0x1fff, 'REGS[10]' : 0x0, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0x0, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x0})
xnor_reg_Instr.addTest({'rd': 10, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0xf0f, 'REGS[10]' : 0x88888888, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[10]' : 0x77777878, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x0})
isa.addInstruction(xnor_reg_Instr)
xnorcc_imm_Instr = trap.Instruction('XNORcc_imm', True, frequency = 5)
xnorcc_imm_Instr.setMachineCode(dpi_format2, {'op3': [0, 1, 0, 1, 1, 1]}, 'TODO')
xnorcc_imm_Instr.setCode(opCodeExecImm, 'execute')
xnorcc_imm_Instr.setCode(opCodeReadRegs1, 'regs')
xnorcc_imm_Instr.setCode(opCodeWb, 'wb')
xnorcc_imm_Instr.addBehavior(IncrementPC, 'fetch')
xnorcc_imm_Instr.addBehavior(ICC_writeLogic, 'execute')
xnorcc_imm_Instr.addVariable(('result', 'BIT<32>'))
xnorcc_imm_Instr.addVariable(('rs1_op', 'BIT<32>'))
xnorcc_imm_Instr.addTest({'rd': 0, 'rs1': 10, 'simm13': 0xfff}, {'REGS[10]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[10]' : 0x0, 'REGS[0]' : 0, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x0})
xnorcc_imm_Instr.addTest({'rd': 1, 'rs1': 10, 'simm13': 0xfff}, {'REGS[10]' : 0x0, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0xfffff000, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x00c00000})
xnorcc_imm_Instr.addTest({'rd': 1, 'rs1': 10, 'simm13': 0xfff}, {'REGS[10]' : 0xffffffff, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0x0fff, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x00400000})
xnorcc_imm_Instr.addTest({'rd': 1, 'rs1': 10, 'simm13': 0x1fff}, {'REGS[10]' : 0x0, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0x0, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x0})
xnorcc_imm_Instr.addTest({'rd': 10, 'rs1': 10, 'simm13': 0xf0f}, {'REGS[10]' : 0x88888888, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[10]' : 0x77777878, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x00400000})
isa.addInstruction(xnorcc_imm_Instr)
xnorcc_reg_Instr = trap.Instruction('XNORcc_reg', True, frequency = 5)
xnorcc_reg_Instr.setMachineCode(dpi_format1, {'op3': [0, 1, 0, 1, 1, 1], 'asi' : [0, 0, 0, 0, 0, 0, 0, 0]}, 'TODO')
xnorcc_reg_Instr.setCode(opCodeExecReg, 'execute')
xnorcc_reg_Instr.setCode(opCodeReadRegs2, 'regs')
xnorcc_reg_Instr.setCode(opCodeWb, 'wb')
xnorcc_reg_Instr.addBehavior(IncrementPC, 'fetch')
xnorcc_reg_Instr.addBehavior(ICC_writeLogic, 'execute')
xnorcc_reg_Instr.addVariable(('result', 'BIT<32>'))
xnorcc_reg_Instr.addVariable(('rs1_op', 'BIT<32>'))
xnorcc_reg_Instr.addVariable(('rs2_op', 'BIT<32>'))
xnorcc_reg_Instr.addTest({'rd': 0, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0xfff, 'REGS[10]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[10]' : 0x0, 'REGS[0]' : 0, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x0})
xnorcc_reg_Instr.addTest({'rd': 1, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0xfff, 'REGS[10]' : 0x0, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0xfffff000, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x00c00000})
xnorcc_reg_Instr.addTest({'rd': 1, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0xfff, 'REGS[10]' : 0xffffffff, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0x0fff, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x00400000})
xnorcc_reg_Instr.addTest({'rd': 1, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0x1fff, 'REGS[10]' : 0x0, 'REGS[1]' : 0x0, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[1]' : 0x0, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x0})
xnorcc_reg_Instr.addTest({'rd': 10, 'rs1': 10, 'rs2': 2}, {'REGS[2]' : 0xf0f, 'REGS[10]' : 0x88888888, 'PC' : 0x0, 'NPC' : 0x4, 'PSR' : 0x0}, {'REGS[10]' : 0x77777878, 'PC' : 0x8, 'NPC' : 0x8, 'PSR' : 0x00400000})
isa.addInstruction(xnorcc_reg_Instr)

# Shift
sll_imm_Instr = trap.Instruction('SLL_imm', True, frequency = 5)
sll_imm_Instr.setMachineCode(dpi_format2, {'op3': [1, 0, 0, 1, 0, 1]}, 'TODO')
sll_imm_Instr.setCode(opCode, 'execute')
sll_imm_Instr.addTest({}, {}, {})
isa.addInstruction(sll_imm_Instr)
sll_reg_Instr = trap.Instruction('SLL_reg', True, frequency = 5)
sll_reg_Instr.setMachineCode(dpi_format1, {'op3': [1, 0, 0, 1, 0, 1], 'asi' : [0, 0, 0, 0, 0, 0, 0, 0]}, 'TODO')
sll_reg_Instr.setCode(opCode, 'execute')
sll_reg_Instr.addTest({}, {}, {})
isa.addInstruction(sll_reg_Instr)
srl_imm_Instr = trap.Instruction('SRL_imm', True, frequency = 5)
srl_imm_Instr.setMachineCode(dpi_format2, {'op3': [1, 0, 0, 1, 1, 0]}, 'TODO')
srl_imm_Instr.setCode(opCode, 'execute')
srl_imm_Instr.addTest({}, {}, {})
isa.addInstruction(srl_imm_Instr)
srl_reg_Instr = trap.Instruction('SRL_reg', True, frequency = 5)
srl_reg_Instr.setMachineCode(dpi_format1, {'op3': [1, 0, 0, 1, 1, 0], 'asi' : [0, 0, 0, 0, 0, 0, 0, 0]}, 'TODO')
srl_reg_Instr.setCode(opCode, 'execute')
srl_reg_Instr.addTest({}, {}, {})
isa.addInstruction(srl_reg_Instr)
sra_imm_Instr = trap.Instruction('SRA_imm', True, frequency = 5)
sra_imm_Instr.setMachineCode(dpi_format2, {'op3': [1, 0, 0, 1, 1, 1]}, 'TODO')
sra_imm_Instr.setCode(opCode, 'execute')
sra_imm_Instr.addTest({}, {}, {})
isa.addInstruction(sra_imm_Instr)
sra_reg_Instr = trap.Instruction('SAR_reg', True, frequency = 5)
sra_reg_Instr.setMachineCode(dpi_format1, {'op3': [1, 0, 0, 1, 1, 1], 'asi' : [0, 0, 0, 0, 0, 0, 0, 0]}, 'TODO')
sra_reg_Instr.setCode(opCode, 'execute')
sra_reg_Instr.addTest({}, {}, {})
isa.addInstruction(sra_reg_Instr)

# Add instruction
add_imm_Instr = trap.Instruction('ADD_imm', True, frequency = 5)
add_imm_Instr.setMachineCode(dpi_format2, {'op3': [0, 0, 0, 0, 0, 0]}, 'TODO')
add_imm_Instr.setCode(opCode, 'execute')
add_imm_Instr.addTest({}, {}, {})
isa.addInstruction(add_imm_Instr)
add_reg_Instr = trap.Instruction('ADD_reg', True, frequency = 5)
add_reg_Instr.setMachineCode(dpi_format1, {'op3': [0, 0, 0, 0, 0, 0], 'asi' : [0, 0, 0, 0, 0, 0, 0, 0]}, 'TODO')
add_reg_Instr.setCode(opCode, 'execute')
add_reg_Instr.addTest({}, {}, {})
isa.addInstruction(add_reg_Instr)
addcc_imm_Instr = trap.Instruction('ADDcc_imm', True, frequency = 5)
addcc_imm_Instr.setMachineCode(dpi_format2, {'op3': [0, 1, 0, 0, 0, 0]}, 'TODO')
addcc_imm_Instr.setCode(opCode, 'execute')
addcc_imm_Instr.addTest({}, {}, {})
isa.addInstruction(addcc_imm_Instr)
addcc_reg_Instr = trap.Instruction('ADDcc_reg', True, frequency = 5)
addcc_reg_Instr.setMachineCode(dpi_format1, {'op3': [0, 1, 0, 0, 0, 0], 'asi' : [0, 0, 0, 0, 0, 0, 0, 0]}, 'TODO')
addcc_reg_Instr.setCode(opCode, 'execute')
addcc_reg_Instr.addTest({}, {}, {})
isa.addInstruction(addcc_reg_Instr)
addx_imm_Instr = trap.Instruction('ADDX_imm', True, frequency = 5)
addx_imm_Instr.setMachineCode(dpi_format2, {'op3': [0, 0, 1, 0, 0, 0]}, 'TODO')
addx_imm_Instr.setCode(opCode, 'execute')
addx_imm_Instr.addTest({}, {}, {})
isa.addInstruction(addx_imm_Instr)
addx_reg_Instr = trap.Instruction('ADDX_reg', True, frequency = 5)
addx_reg_Instr.setMachineCode(dpi_format1, {'op3': [0, 0, 1, 0, 0, 0], 'asi' : [0, 0, 0, 0, 0, 0, 0, 0]}, 'TODO')
addx_reg_Instr.setCode(opCode, 'execute')
addx_reg_Instr.addTest({}, {}, {})
isa.addInstruction(addx_reg_Instr)
addxcc_imm_Instr = trap.Instruction('ADDXcc_imm', True, frequency = 5)
addxcc_imm_Instr.setMachineCode(dpi_format2, {'op3': [0, 1, 1, 0, 0, 0]}, 'TODO')
addxcc_imm_Instr.setCode(opCode, 'execute')
addxcc_imm_Instr.addTest({}, {}, {})
isa.addInstruction(addxcc_imm_Instr)
addxcc_reg_Instr = trap.Instruction('ADDXcc_reg', True, frequency = 5)
addxcc_reg_Instr.setMachineCode(dpi_format1, {'op3': [0, 1, 1, 0, 0, 0], 'asi' : [0, 0, 0, 0, 0, 0, 0, 0]}, 'TODO')
addxcc_reg_Instr.setCode(opCode, 'execute')
addxcc_reg_Instr.addTest({}, {}, {})
isa.addInstruction(addxcc_reg_Instr)
taddcc_imm_Instr = trap.Instruction('TADDcc_imm', True, frequency = 5)
taddcc_imm_Instr.setMachineCode(dpi_format2, {'op3': [1, 0, 0, 0, 0, 0]}, 'TODO')
taddcc_imm_Instr.setCode(opCode, 'execute')
taddcc_imm_Instr.addTest({}, {}, {})
isa.addInstruction(taddcc_imm_Instr)
taddcc_reg_Instr = trap.Instruction('TADDcc_reg', True, frequency = 5)
taddcc_reg_Instr.setMachineCode(dpi_format1, {'op3': [1, 0, 0, 0, 0, 0], 'asi' : [0, 0, 0, 0, 0, 0, 0, 0]}, 'TODO')
taddcc_reg_Instr.setCode(opCode, 'execute')
taddcc_reg_Instr.addTest({}, {}, {})
isa.addInstruction(taddcc_reg_Instr)
taddcctv_imm_Instr = trap.Instruction('TADDccTV_imm', True, frequency = 5)
taddcctv_imm_Instr.setMachineCode(dpi_format2, {'op3': [1, 0, 0, 0, 1, 0]}, 'TODO')
taddcctv_imm_Instr.setCode(opCode, 'execute')
taddcctv_imm_Instr.addTest({}, {}, {})
isa.addInstruction(taddcctv_imm_Instr)
taddcctv_reg_Instr = trap.Instruction('TADDccTV_reg', True, frequency = 5)
taddcctv_reg_Instr.setMachineCode(dpi_format1, {'op3': [1, 0, 0, 0, 1, 0], 'asi' : [0, 0, 0, 0, 0, 0, 0, 0]}, 'TODO')
taddcctv_reg_Instr.setCode(opCode, 'execute')
taddcctv_reg_Instr.addTest({}, {}, {})
isa.addInstruction(taddcctv_reg_Instr)

# Subtract
sub_imm_Instr = trap.Instruction('SUB_imm', True, frequency = 5)
sub_imm_Instr.setMachineCode(dpi_format2, {'op3': [0, 0, 0, 1, 0, 0]}, 'TODO')
sub_imm_Instr.setCode(opCode, 'execute')
sub_imm_Instr.addTest({}, {}, {})
isa.addInstruction(sub_imm_Instr)
sub_reg_Instr = trap.Instruction('SUB_reg', True, frequency = 5)
sub_reg_Instr.setMachineCode(dpi_format1, {'op3': [0, 0, 0, 1, 0, 0], 'asi' : [0, 0, 0, 0, 0, 0, 0, 0]}, 'TODO')
sub_reg_Instr.setCode(opCode, 'execute')
sub_reg_Instr.addTest({}, {}, {})
isa.addInstruction(sub_reg_Instr)
subcc_imm_Instr = trap.Instruction('SUBcc_imm', True, frequency = 5)
subcc_imm_Instr.setMachineCode(dpi_format2, {'op3': [0, 1, 0, 1, 0, 0]}, 'TODO')
subcc_imm_Instr.setCode(opCode, 'execute')
subcc_imm_Instr.addTest({}, {}, {})
isa.addInstruction(subcc_imm_Instr)
subcc_reg_Instr = trap.Instruction('SUBcc_reg', True, frequency = 5)
subcc_reg_Instr.setMachineCode(dpi_format1, {'op3': [0, 1, 0, 1, 0, 0], 'asi' : [0, 0, 0, 0, 0, 0, 0, 0]}, 'TODO')
subcc_reg_Instr.setCode(opCode, 'execute')
subcc_reg_Instr.addTest({}, {}, {})
isa.addInstruction(subcc_reg_Instr)
subx_imm_Instr = trap.Instruction('SUBX_imm', True, frequency = 5)
subx_imm_Instr.setMachineCode(dpi_format2, {'op3': [0, 0, 1, 1, 0, 0]}, 'TODO')
subx_imm_Instr.setCode(opCode, 'execute')
subx_imm_Instr.addTest({}, {}, {})
isa.addInstruction(subx_imm_Instr)
subx_reg_Instr = trap.Instruction('SUBX_reg', True, frequency = 5)
subx_reg_Instr.setMachineCode(dpi_format1, {'op3': [0, 0, 1, 1, 0, 0], 'asi' : [0, 0, 0, 0, 0, 0, 0, 0]}, 'TODO')
subx_reg_Instr.setCode(opCode, 'execute')
subx_reg_Instr.addTest({}, {}, {})
isa.addInstruction(subx_reg_Instr)
subxcc_imm_Instr = trap.Instruction('SUBXcc_imm', True, frequency = 5)
subxcc_imm_Instr.setMachineCode(dpi_format2, {'op3': [0, 1, 1, 1, 0, 0]}, 'TODO')
subxcc_imm_Instr.setCode(opCode, 'execute')
subxcc_imm_Instr.addTest({}, {}, {})
isa.addInstruction(subxcc_imm_Instr)
subxcc_reg_Instr = trap.Instruction('SUBXcc_reg', True, frequency = 5)
subxcc_reg_Instr.setMachineCode(dpi_format1, {'op3': [0, 1, 1, 1, 0, 0], 'asi' : [0, 0, 0, 0, 0, 0, 0, 0]}, 'TODO')
subxcc_reg_Instr.setCode(opCode, 'execute')
subxcc_reg_Instr.addTest({}, {}, {})
isa.addInstruction(subxcc_reg_Instr)
tsubcc_imm_Instr = trap.Instruction('TSUBcc_imm', True, frequency = 5)
tsubcc_imm_Instr.setMachineCode(dpi_format2, {'op3': [1, 0, 0, 0, 0, 1]}, 'TODO')
tsubcc_imm_Instr.setCode(opCode, 'execute')
tsubcc_imm_Instr.addTest({}, {}, {})
isa.addInstruction(tsubcc_imm_Instr)
tsubcc_reg_Instr = trap.Instruction('TSUBcc_reg', True, frequency = 5)
tsubcc_reg_Instr.setMachineCode(dpi_format1, {'op3': [1, 0, 0, 0, 0, 1], 'asi' : [0, 0, 0, 0, 0, 0, 0, 0]}, 'TODO')
tsubcc_reg_Instr.setCode(opCode, 'execute')
tsubcc_reg_Instr.addTest({}, {}, {})
isa.addInstruction(tsubcc_reg_Instr)
tsubcctv_imm_Instr = trap.Instruction('TSUBccTV_imm', True, frequency = 5)
tsubcctv_imm_Instr.setMachineCode(dpi_format2, {'op3': [1, 0, 0, 0, 1, 1]}, 'TODO')
tsubcctv_imm_Instr.setCode(opCode, 'execute')
tsubcctv_imm_Instr.addTest({}, {}, {})
isa.addInstruction(tsubcctv_imm_Instr)
tsubcctv_reg_Instr = trap.Instruction('TSUBccTV_reg', True, frequency = 5)
tsubcctv_reg_Instr.setMachineCode(dpi_format1, {'op3': [1, 0, 0, 0, 1, 1], 'asi' : [0, 0, 0, 0, 0, 0, 0, 0]}, 'TODO')
tsubcctv_reg_Instr.setCode(opCode, 'execute')
tsubcctv_reg_Instr.addTest({}, {}, {})
isa.addInstruction(tsubcctv_reg_Instr)

# Multiply Step
mulscc_imm_Instr = trap.Instruction('MULScc_imm', True, frequency = 5)
mulscc_imm_Instr.setMachineCode(dpi_format2, {'op3': [1, 0, 0, 1, 0, 0]}, 'TODO')
mulscc_imm_Instr.setCode(opCode, 'execute')
mulscc_imm_Instr.addTest({}, {}, {})
isa.addInstruction(mulscc_imm_Instr)
mulscc_reg_Instr = trap.Instruction('MULScc_reg', True, frequency = 5)
mulscc_reg_Instr.setMachineCode(dpi_format1, {'op3': [1, 0, 0, 1, 0, 0], 'asi' : [0, 0, 0, 0, 0, 0, 0, 0]}, 'TODO')
mulscc_reg_Instr.setCode(opCode, 'execute')
mulscc_reg_Instr.addTest({}, {}, {})
isa.addInstruction(mulscc_reg_Instr)

# Multiply
umul_imm_Instr = trap.Instruction('UMUL_imm', True, frequency = 5)
umul_imm_Instr.setMachineCode(dpi_format2, {'op3': [0, 0, 1, 0, 1, 0]}, 'TODO')
umul_imm_Instr.setCode(opCode, 'execute')
umul_imm_Instr.addTest({}, {}, {})
isa.addInstruction(umul_imm_Instr)
umul_reg_Instr = trap.Instruction('UMUL_reg', True, frequency = 5)
umul_reg_Instr.setMachineCode(dpi_format1, {'op3': [0, 0, 1, 0, 1, 0], 'asi' : [0, 0, 0, 0, 0, 0, 0, 0]}, 'TODO')
umul_reg_Instr.setCode(opCode, 'execute')
umul_reg_Instr.addTest({}, {}, {})
isa.addInstruction(umul_reg_Instr)
smul_imm_Instr = trap.Instruction('SMUL_imm', True, frequency = 5)
smul_imm_Instr.setMachineCode(dpi_format2, {'op3': [0, 0, 1, 0, 1, 1]}, 'TODO')
smul_imm_Instr.setCode(opCode, 'execute')
smul_imm_Instr.addTest({}, {}, {})
isa.addInstruction(smul_imm_Instr)
smul_reg_Instr = trap.Instruction('SMUL_reg', True, frequency = 5)
smul_reg_Instr.setMachineCode(dpi_format1, {'op3': [0, 0, 1, 0, 1, 1], 'asi' : [0, 0, 0, 0, 0, 0, 0, 0]}, 'TODO')
smul_reg_Instr.setCode(opCode, 'execute')
smul_reg_Instr.addTest({}, {}, {})
isa.addInstruction(smul_reg_Instr)
umulcc_imm_Instr = trap.Instruction('UMULcc_imm', True, frequency = 5)
umulcc_imm_Instr.setMachineCode(dpi_format2, {'op3': [0, 1, 1, 0, 1, 0]}, 'TODO')
umulcc_imm_Instr.setCode(opCode, 'execute')
umulcc_imm_Instr.addTest({}, {}, {})
isa.addInstruction(umulcc_imm_Instr)
umulcc_reg_Instr = trap.Instruction('UMULcc_reg', True, frequency = 5)
umulcc_reg_Instr.setMachineCode(dpi_format1, {'op3': [0, 1, 1, 0, 1, 0], 'asi' : [0, 0, 0, 0, 0, 0, 0, 0]}, 'TODO')
umulcc_reg_Instr.setCode(opCode, 'execute')
umulcc_reg_Instr.addTest({}, {}, {})
isa.addInstruction(umulcc_reg_Instr)
smulcc_imm_Instr = trap.Instruction('SMULcc_imm', True, frequency = 5)
smulcc_imm_Instr.setMachineCode(dpi_format2, {'op3': [0, 1, 1, 0, 1, 1]}, 'TODO')
smulcc_imm_Instr.setCode(opCode, 'execute')
smulcc_imm_Instr.addTest({}, {}, {})
isa.addInstruction(smulcc_imm_Instr)
smulcc_reg_Instr = trap.Instruction('SMULcc_reg', True, frequency = 5)
smulcc_reg_Instr.setMachineCode(dpi_format1, {'op3': [0, 1, 1, 0, 1, 1], 'asi' : [0, 0, 0, 0, 0, 0, 0, 0]}, 'TODO')
smulcc_reg_Instr.setCode(opCode, 'execute')
smulcc_reg_Instr.addTest({}, {}, {})
isa.addInstruction(smulcc_reg_Instr)

# Divide
udiv_imm_Instr = trap.Instruction('UDIV_imm', True, frequency = 5)
udiv_imm_Instr.setMachineCode(dpi_format2, {'op3': [0, 0, 1, 1, 1, 0]}, 'TODO')
udiv_imm_Instr.setCode(opCode, 'execute')
udiv_imm_Instr.addTest({}, {}, {})
isa.addInstruction(udiv_imm_Instr)
udiv_reg_Instr = trap.Instruction('UDIV_reg', True, frequency = 5)
udiv_reg_Instr.setMachineCode(dpi_format1, {'op3': [0, 0, 1, 1, 1, 0], 'asi' : [0, 0, 0, 0, 0, 0, 0, 0]}, 'TODO')
udiv_reg_Instr.setCode(opCode, 'execute')
udiv_reg_Instr.addTest({}, {}, {})
isa.addInstruction(udiv_reg_Instr)
sdiv_imm_Instr = trap.Instruction('SDIV_imm', True, frequency = 5)
sdiv_imm_Instr.setMachineCode(dpi_format2, {'op3': [0, 0, 1, 1, 1, 1]}, 'TODO')
sdiv_imm_Instr.setCode(opCode, 'execute')
sdiv_imm_Instr.addTest({}, {}, {})
isa.addInstruction(sdiv_imm_Instr)
sdiv_reg_Instr = trap.Instruction('SDIV_reg', True, frequency = 5)
sdiv_reg_Instr.setMachineCode(dpi_format1, {'op3': [0, 0, 1, 1, 1, 1], 'asi' : [0, 0, 0, 0, 0, 0, 0, 0]}, 'TODO')
sdiv_reg_Instr.setCode(opCode, 'execute')
sdiv_reg_Instr.addTest({}, {}, {})
isa.addInstruction(sdiv_reg_Instr)
udivcc_imm_Instr = trap.Instruction('UDIVcc_imm', True, frequency = 5)
udivcc_imm_Instr.setMachineCode(dpi_format2, {'op3': [0, 1, 1, 1, 1, 0]}, 'TODO')
udivcc_imm_Instr.setCode(opCode, 'execute')
udivcc_imm_Instr.addTest({}, {}, {})
isa.addInstruction(udivcc_imm_Instr)
udivcc_reg_Instr = trap.Instruction('UDIVcc_reg', True, frequency = 5)
udivcc_reg_Instr.setMachineCode(dpi_format1, {'op3': [0, 1, 1, 1, 1, 0], 'asi' : [0, 0, 0, 0, 0, 0, 0, 0]}, 'TODO')
udivcc_reg_Instr.setCode(opCode, 'execute')
udivcc_reg_Instr.addTest({}, {}, {})
isa.addInstruction(udivcc_reg_Instr)
sdivcc_imm_Instr = trap.Instruction('SDIVcc_imm', True, frequency = 5)
sdivcc_imm_Instr.setMachineCode(dpi_format2, {'op3': [0, 1, 1, 1, 1, 1]}, 'TODO')
sdivcc_imm_Instr.setCode(opCode, 'execute')
sdivcc_imm_Instr.addTest({}, {}, {})
isa.addInstruction(sdivcc_imm_Instr)
sdivcc_reg_Instr = trap.Instruction('SDIVcc_reg', True, frequency = 5)
sdivcc_reg_Instr.setMachineCode(dpi_format1, {'op3': [0, 1, 1, 1, 1, 1], 'asi' : [0, 0, 0, 0, 0, 0, 0, 0]}, 'TODO')
sdivcc_reg_Instr.setCode(opCode, 'execute')
sdivcc_reg_Instr.addTest({}, {}, {})
isa.addInstruction(sdivcc_reg_Instr)

# Save and Restore
save_imm_Instr = trap.Instruction('SAVE_imm', True, frequency = 5)
save_imm_Instr.setMachineCode(dpi_format2, {'op3': [1, 1, 1, 1, 0, 0]}, 'TODO')
save_imm_Instr.setCode(opCode, 'execute')
save_imm_Instr.addTest({}, {}, {})
isa.addInstruction(save_imm_Instr)
save_reg_Instr = trap.Instruction('SAVE_reg', True, frequency = 5)
save_reg_Instr.setMachineCode(dpi_format1, {'op3': [1, 1, 1, 1, 0, 0], 'asi' : [0, 0, 0, 0, 0, 0, 0, 0]}, 'TODO')
save_reg_Instr.setCode(opCode, 'execute')
save_reg_Instr.addTest({}, {}, {})
isa.addInstruction(save_reg_Instr)
restore_imm_Instr = trap.Instruction('RESTORE_imm', True, frequency = 5)
restore_imm_Instr.setMachineCode(dpi_format2, {'op3': [1, 1, 1, 1, 0, 1]}, 'TODO')
restore_imm_Instr.setCode(opCode, 'execute')
restore_imm_Instr.addTest({}, {}, {})
isa.addInstruction(restore_imm_Instr)
restore_reg_Instr = trap.Instruction('RESTORE_reg', True, frequency = 5)
restore_reg_Instr.setMachineCode(dpi_format1, {'op3': [1, 1, 1, 1, 0, 1], 'asi' : [0, 0, 0, 0, 0, 0, 0, 0]}, 'TODO')
restore_reg_Instr.setCode(opCode, 'execute')
restore_reg_Instr.addTest({}, {}, {})
isa.addInstruction(restore_reg_Instr)

# Branch on Integer Condition Codes
opCode = cxx_writer.Code("""
switch(cond){
    case 0b1000:{
        // Branch Always
        unsigned int targetPc = PC + 4*(SignExtend(disp22, 22));
        #ifdef ACC_MODEL
        PC = targetPc;
        NPC = targetPc + 4;
        if(a == 1){
            flush();
        }
        #else
        if(a == 1){
            PC = targetPc - 8;
            NPC = targetPc - 4;
        }
        else{
            NPC = targetPc - 8;
        }
        #endif
    break;}
    case 0b0000:{
        // Branch Never
        #ifdef ACC_MODEL
        if(a == 1){
            flush();
        }
        #else
        if(a == 1){
            PC = NPC;
            NPC = NPC + 4;
        }
        #endif
    break;}
    default:{
        // All the other non-special situations
        bool exec = ((cond == 0b1001) && PSR[key_ICC_z] == 0) ||
                    ((cond == 0b0001) && PSR[key_ICC_z] != 0) ||
                    ((cond == 0b1010) && (PSR[key_ICC_z] == 0) && (PSR[key_ICC_n] == PSR[key_ICC_v])) ||
                    ((cond == 0b0010) && ((PSR[key_ICC_z] != 0) || (PSR[key_ICC_n] != PSR[key_ICC_v]))) ||
                    ((cond == 0b1011) && PSR[key_ICC_n] == PSR[key_ICC_v]) ||
                    ((cond == 0b0011) && PSR[key_ICC_n] != PSR[key_ICC_v]) ||
                    ((cond == 0b1100) && (PSR[key_ICC_c] + PSR[key_ICC_z]) == 0) ||
                    ((cond == 0b0100) && (PSR[key_ICC_c] + PSR[key_ICC_z]) > 0) ||
                    ((cond == 0b1101) && PSR[key_ICC_c] == 0) ||
                    ((cond == 0b0101) && PSR[key_ICC_c] != 0) ||
                    ((cond == 0b1110) && PSR[key_ICC_n] == 0) ||
                    ((cond == 0b0110) && PSR[key_ICC_n] != 0) ||
                    ((cond == 0b1111) && PSR[key_ICC_v] == 0) ||
                    ((cond == 0b0111) && PSR[key_ICC_v] != 0);
        if(exec){
            unsigned int targetPc = PC + 4*(SignExtend(disp22, 22));
            #ifdef ACC_MODEL
            PC = targetPc;
            NPC = targetPc + 4;
            #else
            NPC = targetPc - 8;
            #endif
        }
        else if(a == 1){
            #ifdef ACC_MODEL
            flush();
            #else
            PC = NPC;
            NPC = NPC + 4;
            #endif
        }
    break;}
}
""")
branch_Instr = trap.Instruction('BRANCH', True, frequency = 5)
branch_Instr.setMachineCode(b_sethi_format2, {'op2' : [0, 1, 0]}, 'TODO')
branch_Instr.setCode(opCode, 'decode')
branch_Instr.addBehavior(IncrementPC, 'fetch')
branch_Instr.addTest({'cond': int('1000', 2), 'a': 0, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x0}, {'PC' : 0x8, 'NPC' : 0x800})
branch_Instr.addTest({'cond': int('1000', 2), 'a': 1, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x0}, {'PC' : 0x804, 'NPC' : 0x804})
branch_Instr.addTest({'cond': int('0000', 2), 'a': 0, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x0}, {'PC' : 0x8, 'NPC' : 0x8})
branch_Instr.addTest({'cond': int('0000', 2), 'a': 1, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x0}, {'PC' : 0xc, 'NPC' : 0xc})
branch_Instr.addTest({'cond': int('1001', 2), 'a': 0, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00000000}, {'PC' : 0x8, 'NPC' : 0x800})
branch_Instr.addTest({'cond': int('1001', 2), 'a': 1, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00000000}, {'PC' : 0x8, 'NPC' : 0x800})
branch_Instr.addTest({'cond': int('1001', 2), 'a': 1, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00400000}, {'PC' : 0xc, 'NPC' : 0xc})
branch_Instr.addTest({'cond': int('1001', 2), 'a': 0, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00400000}, {'PC' : 0x8, 'NPC' : 0x8})
branch_Instr.addTest({'cond': int('0001', 2), 'a': 0, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00400000}, {'PC' : 0x8, 'NPC' : 0x800})
branch_Instr.addTest({'cond': int('0001', 2), 'a': 1, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00400000}, {'PC' : 0x8, 'NPC' : 0x800})
branch_Instr.addTest({'cond': int('0001', 2), 'a': 1, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00000000}, {'PC' : 0xc, 'NPC' : 0xc})
branch_Instr.addTest({'cond': int('0001', 2), 'a': 0, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00000000}, {'PC' : 0x8, 'NPC' : 0x8})
branch_Instr.addTest({'cond': int('1010', 2), 'a': 0, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00000000}, {'PC' : 0x8, 'NPC' : 0x800})
branch_Instr.addTest({'cond': int('1010', 2), 'a': 1, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00000000}, {'PC' : 0x8, 'NPC' : 0x800})
branch_Instr.addTest({'cond': int('1010', 2), 'a': 0, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00a00000}, {'PC' : 0x8, 'NPC' : 0x800})
branch_Instr.addTest({'cond': int('1010', 2), 'a': 1, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00a00000}, {'PC' : 0x8, 'NPC' : 0x800})
branch_Instr.addTest({'cond': int('1010', 2), 'a': 1, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00400000}, {'PC' : 0xc, 'NPC' : 0xc})
branch_Instr.addTest({'cond': int('1010', 2), 'a': 0, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00400000}, {'PC' : 0x8, 'NPC' : 0x8})
branch_Instr.addTest({'cond': int('1010', 2), 'a': 1, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00800000}, {'PC' : 0xc, 'NPC' : 0xc})
branch_Instr.addTest({'cond': int('1010', 2), 'a': 0, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00800000}, {'PC' : 0x8, 'NPC' : 0x8})
branch_Instr.addTest({'cond': int('1010', 2), 'a': 1, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00200000}, {'PC' : 0xc, 'NPC' : 0xc})
branch_Instr.addTest({'cond': int('1010', 2), 'a': 0, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00200000}, {'PC' : 0x8, 'NPC' : 0x8})
branch_Instr.addTest({'cond': int('1010', 2), 'a': 1, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00600000}, {'PC' : 0xc, 'NPC' : 0xc})
branch_Instr.addTest({'cond': int('1010', 2), 'a': 0, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00600000}, {'PC' : 0x8, 'NPC' : 0x8})
branch_Instr.addTest({'cond': int('0010', 2), 'a': 0, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00400000}, {'PC' : 0x8, 'NPC' : 0x800})
branch_Instr.addTest({'cond': int('0010', 2), 'a': 1, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00400000}, {'PC' : 0x8, 'NPC' : 0x800})
branch_Instr.addTest({'cond': int('0010', 2), 'a': 0, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00800000}, {'PC' : 0x8, 'NPC' : 0x800})
branch_Instr.addTest({'cond': int('0010', 2), 'a': 1, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00800000}, {'PC' : 0x8, 'NPC' : 0x800})
branch_Instr.addTest({'cond': int('0010', 2), 'a': 0, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00200000}, {'PC' : 0x8, 'NPC' : 0x800})
branch_Instr.addTest({'cond': int('0010', 2), 'a': 1, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00200000}, {'PC' : 0x8, 'NPC' : 0x800})
branch_Instr.addTest({'cond': int('0010', 2), 'a': 0, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00600000}, {'PC' : 0x8, 'NPC' : 0x800})
branch_Instr.addTest({'cond': int('0010', 2), 'a': 1, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00600000}, {'PC' : 0x8, 'NPC' : 0x800})
branch_Instr.addTest({'cond': int('0010', 2), 'a': 1, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00000000}, {'PC' : 0xc, 'NPC' : 0xc})
branch_Instr.addTest({'cond': int('0010', 2), 'a': 0, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00000000}, {'PC' : 0x8, 'NPC' : 0x8})
branch_Instr.addTest({'cond': int('0010', 2), 'a': 1, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00a00000}, {'PC' : 0xc, 'NPC' : 0xc})
branch_Instr.addTest({'cond': int('0010', 2), 'a': 0, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00a00000}, {'PC' : 0x8, 'NPC' : 0x8})
branch_Instr.addTest({'cond': int('1011', 2), 'a': 0, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00000000}, {'PC' : 0x8, 'NPC' : 0x800})
branch_Instr.addTest({'cond': int('1011', 2), 'a': 1, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00000000}, {'PC' : 0x8, 'NPC' : 0x800})
branch_Instr.addTest({'cond': int('1011', 2), 'a': 0, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00a00000}, {'PC' : 0x8, 'NPC' : 0x800})
branch_Instr.addTest({'cond': int('1011', 2), 'a': 1, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00a00000}, {'PC' : 0x8, 'NPC' : 0x800})
branch_Instr.addTest({'cond': int('1011', 2), 'a': 1, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00800000}, {'PC' : 0xc, 'NPC' : 0xc})
branch_Instr.addTest({'cond': int('1011', 2), 'a': 0, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00800000}, {'PC' : 0x8, 'NPC' : 0x8})
branch_Instr.addTest({'cond': int('1011', 2), 'a': 1, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00200000}, {'PC' : 0xc, 'NPC' : 0xc})
branch_Instr.addTest({'cond': int('1011', 2), 'a': 0, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00200000}, {'PC' : 0x8, 'NPC' : 0x8})
branch_Instr.addTest({'cond': int('0011', 2), 'a': 0, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00800000}, {'PC' : 0x8, 'NPC' : 0x800})
branch_Instr.addTest({'cond': int('0011', 2), 'a': 1, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00800000}, {'PC' : 0x8, 'NPC' : 0x800})
branch_Instr.addTest({'cond': int('0011', 2), 'a': 0, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00200000}, {'PC' : 0x8, 'NPC' : 0x800})
branch_Instr.addTest({'cond': int('0011', 2), 'a': 1, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00200000}, {'PC' : 0x8, 'NPC' : 0x800})
branch_Instr.addTest({'cond': int('0011', 2), 'a': 1, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00000000}, {'PC' : 0xc, 'NPC' : 0xc})
branch_Instr.addTest({'cond': int('0011', 2), 'a': 0, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00000000}, {'PC' : 0x8, 'NPC' : 0x8})
branch_Instr.addTest({'cond': int('0011', 2), 'a': 1, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00a00000}, {'PC' : 0xc, 'NPC' : 0xc})
branch_Instr.addTest({'cond': int('0011', 2), 'a': 0, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00a00000}, {'PC' : 0x8, 'NPC' : 0x8})
branch_Instr.addTest({'cond': int('1100', 2), 'a': 0, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00000000}, {'PC' : 0x8, 'NPC' : 0x800})
branch_Instr.addTest({'cond': int('1100', 2), 'a': 1, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00000000}, {'PC' : 0x8, 'NPC' : 0x800})
branch_Instr.addTest({'cond': int('1100', 2), 'a': 1, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00100000}, {'PC' : 0xc, 'NPC' : 0xc})
branch_Instr.addTest({'cond': int('1100', 2), 'a': 0, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00100000}, {'PC' : 0x8, 'NPC' : 0x8})
branch_Instr.addTest({'cond': int('1100', 2), 'a': 1, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00400000}, {'PC' : 0xc, 'NPC' : 0xc})
branch_Instr.addTest({'cond': int('1100', 2), 'a': 0, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00400000}, {'PC' : 0x8, 'NPC' : 0x8})
branch_Instr.addTest({'cond': int('1100', 2), 'a': 1, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00500000}, {'PC' : 0xc, 'NPC' : 0xc})
branch_Instr.addTest({'cond': int('1100', 2), 'a': 0, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00500000}, {'PC' : 0x8, 'NPC' : 0x8})
branch_Instr.addTest({'cond': int('0100', 2), 'a': 0, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00100000}, {'PC' : 0x8, 'NPC' : 0x800})
branch_Instr.addTest({'cond': int('0100', 2), 'a': 1, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00100000}, {'PC' : 0x8, 'NPC' : 0x800})
branch_Instr.addTest({'cond': int('0100', 2), 'a': 0, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00400000}, {'PC' : 0x8, 'NPC' : 0x800})
branch_Instr.addTest({'cond': int('0100', 2), 'a': 1, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00400000}, {'PC' : 0x8, 'NPC' : 0x800})
branch_Instr.addTest({'cond': int('0100', 2), 'a': 0, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00500000}, {'PC' : 0x8, 'NPC' : 0x800})
branch_Instr.addTest({'cond': int('0100', 2), 'a': 1, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00500000}, {'PC' : 0x8, 'NPC' : 0x800})
branch_Instr.addTest({'cond': int('0100', 2), 'a': 1, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00000000}, {'PC' : 0xc, 'NPC' : 0xc})
branch_Instr.addTest({'cond': int('0100', 2), 'a': 0, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00000000}, {'PC' : 0x8, 'NPC' : 0x8})
branch_Instr.addTest({'cond': int('1101', 2), 'a': 0, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00000000}, {'PC' : 0x8, 'NPC' : 0x800})
branch_Instr.addTest({'cond': int('1101', 2), 'a': 1, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00000000}, {'PC' : 0x8, 'NPC' : 0x800})
branch_Instr.addTest({'cond': int('1101', 2), 'a': 1, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00100000}, {'PC' : 0xc, 'NPC' : 0xc})
branch_Instr.addTest({'cond': int('1101', 2), 'a': 0, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00100000}, {'PC' : 0x8, 'NPC' : 0x8})
branch_Instr.addTest({'cond': int('0101', 2), 'a': 0, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00100000}, {'PC' : 0x8, 'NPC' : 0x800})
branch_Instr.addTest({'cond': int('0101', 2), 'a': 1, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00100000}, {'PC' : 0x8, 'NPC' : 0x800})
branch_Instr.addTest({'cond': int('0101', 2), 'a': 1, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00000000}, {'PC' : 0xc, 'NPC' : 0xc})
branch_Instr.addTest({'cond': int('0101', 2), 'a': 0, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00000000}, {'PC' : 0x8, 'NPC' : 0x8})
branch_Instr.addTest({'cond': int('1110', 2), 'a': 0, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00000000}, {'PC' : 0x8, 'NPC' : 0x800})
branch_Instr.addTest({'cond': int('1110', 2), 'a': 1, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00000000}, {'PC' : 0x8, 'NPC' : 0x800})
branch_Instr.addTest({'cond': int('1110', 2), 'a': 1, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00800000}, {'PC' : 0xc, 'NPC' : 0xc})
branch_Instr.addTest({'cond': int('1110', 2), 'a': 0, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00800000}, {'PC' : 0x8, 'NPC' : 0x8})
branch_Instr.addTest({'cond': int('0110', 2), 'a': 0, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00800000}, {'PC' : 0x8, 'NPC' : 0x800})
branch_Instr.addTest({'cond': int('0110', 2), 'a': 1, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00800000}, {'PC' : 0x8, 'NPC' : 0x800})
branch_Instr.addTest({'cond': int('0110', 2), 'a': 1, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00000000}, {'PC' : 0xc, 'NPC' : 0xc})
branch_Instr.addTest({'cond': int('0110', 2), 'a': 0, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00000000}, {'PC' : 0x8, 'NPC' : 0x8})
branch_Instr.addTest({'cond': int('1111', 2), 'a': 0, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00000000}, {'PC' : 0x8, 'NPC' : 0x800})
branch_Instr.addTest({'cond': int('1111', 2), 'a': 1, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00000000}, {'PC' : 0x8, 'NPC' : 0x800})
branch_Instr.addTest({'cond': int('1111', 2), 'a': 1, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00200000}, {'PC' : 0xc, 'NPC' : 0xc})
branch_Instr.addTest({'cond': int('1111', 2), 'a': 0, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00200000}, {'PC' : 0x8, 'NPC' : 0x8})
branch_Instr.addTest({'cond': int('0111', 2), 'a': 0, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00200000}, {'PC' : 0x8, 'NPC' : 0x800})
branch_Instr.addTest({'cond': int('0111', 2), 'a': 1, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00200000}, {'PC' : 0x8, 'NPC' : 0x800})
branch_Instr.addTest({'cond': int('0111', 2), 'a': 1, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00000000}, {'PC' : 0xc, 'NPC' : 0xc})
branch_Instr.addTest({'cond': int('0111', 2), 'a': 0, 'disp22': 0x200}, {'PC' : 0x0, 'NPC' : 0x4, 'PSR': 0x00000000}, {'PC' : 0x8, 'NPC' : 0x8})

isa.addInstruction(branch_Instr)

# Call and Link
opCode = cxx_writer.Code("""
""")
call_Instr = trap.Instruction('CALL', True, frequency = 5)
call_Instr.setMachineCode(call_format, {}, 'TODO')
call_Instr.setCode(opCode, 'execute')
call_Instr.addTest({}, {}, {})
isa.addInstruction(call_Instr)

# Jump and Link
opCode = cxx_writer.Code("""
""")
jump_imm_Instr = trap.Instruction('JUMP_imm', True, frequency = 5)
jump_imm_Instr.setMachineCode(dpi_format2, {'op3': [1, 1, 1, 0, 0, 0]}, 'TODO')
jump_imm_Instr.setCode(opCode, 'execute')
jump_imm_Instr.addTest({}, {}, {})
isa.addInstruction(jump_imm_Instr)
jump_reg_Instr = trap.Instruction('JUMP_reg', True, frequency = 5)
jump_reg_Instr.setMachineCode(dpi_format1, {'op3': [1, 1, 1, 0, 0, 0], 'asi' : [0, 0, 0, 0, 0, 0, 0, 0]}, 'TODO')
jump_reg_Instr.setCode(opCode, 'execute')
jump_reg_Instr.addTest({}, {}, {})
isa.addInstruction(jump_reg_Instr)

# Return from Trap
opCode = cxx_writer.Code("""
""")
rett_imm_Instr = trap.Instruction('RETT_imm', True, frequency = 5)
rett_imm_Instr.setMachineCode(dpi_format2, {'op3': [1, 1, 1, 0, 0, 1]}, 'TODO')
rett_imm_Instr.setCode(opCode, 'execute')
rett_imm_Instr.addTest({}, {}, {})
isa.addInstruction(rett_imm_Instr)
rett_reg_Instr = trap.Instruction('RETT_reg', True, frequency = 5)
rett_reg_Instr.setMachineCode(dpi_format1, {'op3': [1, 1, 1, 0, 0, 1], 'asi' : [0, 0, 0, 0, 0, 0, 0, 0]}, 'TODO')
rett_reg_Instr.setCode(opCode, 'execute')
rett_reg_Instr.addTest({}, {}, {})
isa.addInstruction(rett_reg_Instr)

# Trap on Integer Condition Code
opCode = cxx_writer.Code("""
""")
trap_imm_Instr = trap.Instruction('TRAP_imm', True, frequency = 5)
trap_imm_Instr.setMachineCode(dpi_format2, {'op3': [1, 1, 1, 0, 1, 0]}, 'TODO')
trap_imm_Instr.setCode(opCode, 'execute')
trap_imm_Instr.addTest({}, {}, {})
isa.addInstruction(trap_imm_Instr)
trap_reg_Instr = trap.Instruction('TRAP_reg', True, frequency = 5)
trap_reg_Instr.setMachineCode(dpi_format1, {'op3': [1, 1, 1, 0, 1, 0], 'asi' : [0, 0, 0, 0, 0, 0, 0, 0]}, 'TODO')
trap_reg_Instr.setCode(opCode, 'execute')
trap_reg_Instr.addTest({}, {}, {})
isa.addInstruction(trap_reg_Instr)

# Read State Register
opCode = cxx_writer.Code("""
""")
readReg_Instr = trap.Instruction('READreg', True, frequency = 5)
readReg_Instr.setMachineCode(dpi_format1, {'op3': [1, 0, 1, 0, 0, 0], 'asi' : [0, 0, 0, 0, 0, 0, 0, 0]}, 'TODO')
readReg_Instr.setCode(opCode, 'execute')
readReg_Instr.addTest({}, {}, {})
isa.addInstruction(readReg_Instr)
readPsr_Instr = trap.Instruction('READpsr', True, frequency = 5)
readPsr_Instr.setMachineCode(dpi_format1, {'op3': [1, 0, 1, 0, 0, 1], 'asi' : [0, 0, 0, 0, 0, 0, 0, 0]}, 'TODO')
readPsr_Instr.setCode(opCode, 'execute')
readPsr_Instr.addTest({}, {}, {})
isa.addInstruction(readPsr_Instr)
readWim_Instr = trap.Instruction('READwim', True, frequency = 5)
readWim_Instr.setMachineCode(dpi_format1, {'op3': [1, 0, 1, 0, 1, 0], 'asi' : [0, 0, 0, 0, 0, 0, 0, 0]}, 'TODO')
readWim_Instr.setCode(opCode, 'execute')
readWim_Instr.addTest({}, {}, {})
isa.addInstruction(readWim_Instr)
readTbr_Instr = trap.Instruction('READtbr', True, frequency = 5)
readTbr_Instr.setMachineCode(dpi_format1, {'op3': [1, 0, 1, 0, 1, 1], 'asi' : [0, 0, 0, 0, 0, 0, 0, 0]}, 'TODO')
readTbr_Instr.setCode(opCode, 'execute')
readTbr_Instr.addTest({}, {}, {})
isa.addInstruction(readTbr_Instr)

# Write State Register
writeReg_reg_Instr = trap.Instruction('WRITEreg_reg', True, frequency = 5)
writeReg_reg_Instr.setMachineCode(dpi_format1, {'op3': [1, 1, 0, 0, 0, 0], 'asi' : [0, 0, 0, 0, 0, 0, 0, 0]}, 'TODO')
writeReg_reg_Instr.setCode(opCode, 'execute')
writeReg_reg_Instr.addTest({}, {}, {})
isa.addInstruction(writeReg_reg_Instr)
writeReg_imm_Instr = trap.Instruction('WRITEreg_imm', True, frequency = 5)
writeReg_imm_Instr.setMachineCode(dpi_format2, {'op3': [1, 1, 0, 0, 0, 0]}, 'TODO')
writeReg_imm_Instr.setCode(opCode, 'execute')
writeReg_imm_Instr.addTest({}, {}, {})
isa.addInstruction(writeReg_imm_Instr)
writePsr_reg_Instr = trap.Instruction('WRITEpsr_reg', True, frequency = 5)
writePsr_reg_Instr.setMachineCode(dpi_format1, {'op3': [1, 1, 0, 0, 0, 1], 'asi' : [0, 0, 0, 0, 0, 0, 0, 0]}, 'TODO')
writePsr_reg_Instr.setCode(opCode, 'execute')
writePsr_reg_Instr.addTest({}, {}, {})
isa.addInstruction(writePsr_reg_Instr)
writePsr_imm_Instr = trap.Instruction('WRITEpsr_imm', True, frequency = 5)
writePsr_imm_Instr.setMachineCode(dpi_format2, {'op3': [1, 1, 0, 0, 0, 1]}, 'TODO')
writePsr_imm_Instr.setCode(opCode, 'execute')
writePsr_imm_Instr.addTest({}, {}, {})
isa.addInstruction(writePsr_imm_Instr)
writeWim_reg_Instr = trap.Instruction('WRITEwim_reg', True, frequency = 5)
writeWim_reg_Instr.setMachineCode(dpi_format1, {'op3': [1, 1, 0, 0, 1, 0], 'asi' : [0, 0, 0, 0, 0, 0, 0, 0]}, 'TODO')
writeWim_reg_Instr.setCode(opCode, 'execute')
writeWim_reg_Instr.addTest({}, {}, {})
isa.addInstruction(writeWim_reg_Instr)
writeWim_imm_Instr = trap.Instruction('WRITEwim_imm', True, frequency = 5)
writeWim_imm_Instr.setMachineCode(dpi_format2, {'op3': [1, 1, 0, 0, 1, 0]}, 'TODO')
writeWim_imm_Instr.setCode(opCode, 'execute')
writeWim_imm_Instr.addTest({}, {}, {})
isa.addInstruction(writeWim_imm_Instr)
writeTbr_reg_Instr = trap.Instruction('WRITEtbr_reg', True, frequency = 5)
writeTbr_reg_Instr.setMachineCode(dpi_format1, {'op3': [1, 1, 0, 0, 1, 1], 'asi' : [0, 0, 0, 0, 0, 0, 0, 0]}, 'TODO')
writeTbr_reg_Instr.setCode(opCode, 'execute')
writeTbr_reg_Instr.addTest({}, {}, {})
isa.addInstruction(writeTbr_reg_Instr)
writeTbr_imm_Instr = trap.Instruction('WRITEtbr_imm', True, frequency = 5)
writeTbr_imm_Instr.setMachineCode(dpi_format2, {'op3': [1, 1, 0, 0, 1, 1]}, 'TODO')
writeTbr_imm_Instr.setCode(opCode, 'execute')
writeTbr_imm_Instr.addTest({}, {}, {})
isa.addInstruction(writeTbr_imm_Instr)

## Store Barrier
stbar_Instr = trap.Instruction('STBAR', True, frequency = 5)
stbar_Instr.setMachineCode(stbar_format, {}, 'TODO', subInstr = True)
stbar_Instr.setCode(opCode, 'execute')
stbar_Instr.addTest({}, {}, {})
isa.addInstruction(stbar_Instr)

# Unimplemented Instruction
unimpl_Instr = trap.Instruction('UNIMP', True, frequency = 5)
unimpl_Instr.setMachineCode(b_sethi_format1, {'op2' : [0, 0, 0]}, 'TODO')
isa.addInstruction(unimpl_Instr)

# Flush Memory
flush_reg_Instr = trap.Instruction('FLUSH_reg', True, frequency = 5)
flush_reg_Instr.setMachineCode(dpi_format1, {'op3': [1, 1, 1, 0, 1, 1], 'asi' : [0, 0, 0, 0, 0, 0, 0, 0]}, 'TODO')
flush_reg_Instr.setCode(opCode, 'execute')
flush_reg_Instr.addTest({}, {}, {})
isa.addInstruction(flush_reg_Instr)
flush_imm_Instr = trap.Instruction('FLUSH_imm', True, frequency = 5)
flush_imm_Instr.setMachineCode(dpi_format2, {'op3': [1, 1, 1, 0, 1, 1]}, 'TODO')
flush_imm_Instr.setCode(opCode, 'execute')
flush_imm_Instr.addTest({}, {}, {})
isa.addInstruction(flush_imm_Instr)

