-- After examining the VHDL code the determined register bypasses are:
In order fo all this to work correctly we need to extend TRAP to:
** Declare what are the special registers read by each instruction: we should stall also on them
** think well about register bypassing: the best thing seems to declare a new fake register, where we
write the value after computation; if the instruction receives values from a bypass it reads from
that register, otherwise it reads from the normal register. For each instruction I also specify
the registers from which it receives values as a bypass: in this case I wait for them and not for the
real register, thus eliminating the stall.

-- Write to special registers has 3 cycles delay!!! does this mean that also special registers are
written in the WB stage? how is this modeled in the functional model???Can I model delayed writes in
the registers (so not using the = operator for assignment) but with the effect that assignments are
delayed. This does not affect the cycle accurate simulator, but it means that delayed registers are
refreshed after each cycle in the CA model (I also have to keep a queue of 3 yet to commit values
in the queue in case there is a queue of such instructions, all of this for the functional model).
This also means that SPECIAL REGISTERS ARE WRITTEN IN THE WB STAGE AND THAT BYPASSES ARE PRESENT
FOR PSR IN CASE THERE IS A BRANCH (bypass from the execute stage: how do we implement this??)
Are there other bypasses???
** For this to work correctly in the functional model we can implement delayed register assignment (which
has no effect in the ca model): the value gets assigned to the register after the specified number
of cycles. For the instructions which have bypasses I read from the fake bypass register: this is a
non delayed register, so the problem is solved, and the instruction immediately sees the correct value.

-- Exceptions: since the exception is resolved in the exceptions stage, there are other 5 instructions
already in the pipeline. This does not happen in the functional model, where we trap at the
immediately following instruction. How do we behave? are all the 5 instructions in the
pipeline flushed or .... do we have to implement a 5 instructions delay in the functional
model???check with TSIM --- !!!!!Check, but I would say that there is a flush by looking
at VHDL code!!!!!

-- Interrupts: the processor has in input one line of 4 bits encoding the interrupt
request level of the corresponding interrupt; the queue of interrupts is dealt with by
the interrupt controller, so I should not bother with it. Processor should be able to
acknowledge the interrupt (how?? is there a separate line?) CHECK in the VHDL code.

-- The 8 bit ASI is appended to the 32 bits when memory is accessed (do we need to
send them on the output TLM port? and what if internal memory is used?)I think
they are dealt with inside the processor itself and never sent out...CHECK on VHDL model...
otherwise, if they are sent out, we need to accordingly modify the bus

-- Accurately check the result of the multiplication signed operations with respect to
tsim implementation

ALREADY CONSIDERED NOTES:

-- Branch instruction directly modifies not only NPC but also the program counter directly,
so there is no need for bubbles in the pipeline. Actually all instructions do so, they do not
really use the NPC register (but for easyness I can use it an simply behave differently
in the cycle accurate, where I modify both, and in the functional, where I simply modify
NPC). This also because the functional behavior of sparc V8 is:
fetch from PC
PC = nPC
nPC += 4

-- The check for the condition code (if any) to see if an instruction should be
annulled is done in the decode stage (??is this really true?? so not just branch but
all instructions with condition code are delayed if a preceding instruction is not
in fetch yet?) - actually the only instructions with condition code are the branches

-- Branch instruction, depending on the a bit may annull the successive instruction; in the
pipeline this just means a flush (which is the stage where the annull is done?? CHECK on
VHDL). For the functional model, this means that I also modify the PC and not just the
nPC, so the next instruction is not even fetched

-- For efficiency, shall we use constant registers, whose value is set at processor startup
and cannot be modified (e.g. r0 of the sparc processor)

-- Memory stage: In this stage we also check for interrupts in the interrupt line (irq_trap) and
for interrupts due to instructions (mem_trap). We actually set the trap variable trap = 1 in
case it is necessary. This variable is then checked in the exception stage (in the
following clock cycle) and variable xc_exception is set. This variable is finally checked
in the following fetch and the appropriate flow is followed (so we jump to the correct
trap handler, etc.) --> Actually I modify in the exception stage the program
counter in order to perform a jump to the correct trap handler in case there is a
trap

-- ASR and Y registers are written for mul/div (mul_res) in write back stage...so I guess that
all but PSR are written in the WB stage. Actually, from the VHDL code, it seems that there is
not WB stage and that write back is performed in the exception stage????????? TODO TODO. What about
the ICC in the PSR? it looks like it is written in the WB a part from some forwarding for
branch .... CHECK

-- Branch: I have to check that instructions already issued to not modify the psr.icc otherwise the branch cannot
be resolved in the decode stage, but I have to wait for one or two pipeline cycles.
ES:
If there are two instructions:
A
branch
Instruction A will change the psr.icc, so is it right that one
pipeline hold should be at decode stage so that branch instruction
can get the the newest icc until A passes execute stage?
So I have to stall the pipeline for two cycles in this case, until I pass
the execute stage. Does this mean that PSR is written in the execute stage and not
in the WB one?
